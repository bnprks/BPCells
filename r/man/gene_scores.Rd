% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geneScores.R
\name{gene_score_weights_archr}
\alias{gene_score_weights_archr}
\alias{gene_score_archr}
\title{Calculate GeneActivityScores}
\usage{
gene_score_weights_archr(
  genes,
  chromosome_sizes,
  blacklist = NULL,
  tile_width = 500,
  gene_name_column = "gene_id",
  addArchRBug = FALSE
)

gene_score_archr(
  fragments,
  genes,
  chromosome_sizes,
  blacklist = NULL,
  tile_width = 500,
  gene_name_column = "gene_id",
  addArchRBug = FALSE,
  tile_max_count = 4,
  scale_factor = 10000,
  tile_matrix_path = tempfile(pattern = "gene_score_tile_mat")
)
}
\arguments{
\item{genes}{Gene coordinates given as GRanges, data.frame, or list. See \code{help("genomic-ranges-like")} for details on format and coordinate systems. Required attributes:
\itemize{
\item \code{chr}, \code{start}, \code{end}: genomic position
\item \code{strand}: +/- or TRUE/FALSE for positive or negative strand
}}

\item{chromosome_sizes}{Chromosome start and end coordinates given as GRanges, data.frame, or list. See \code{help("genomic-ranges-like")} for details on format and coordinate systems. Required attributes:
\itemize{
\item \code{chr}, \code{start}, \code{end}: genomic position
}

See \code{read_ucsc_chrom_sizes()}.}

\item{blacklist}{Regions to exclude from calculations, given as GRanges, data.frame, or list. See \code{help("genomic-ranges-like")} for details on format and coordinate systems. Required attributes:
\itemize{
\item \code{chr}, \code{start}, \code{end}: genomic position
}}

\item{tile_width}{Size of tiles to consider}

\item{gene_name_column}{If not NULL, a column name of \code{genes} to use as row names}

\item{addArchRBug}{Replicate ArchR bug in handling nested genes}

\item{fragments}{Input fragments object}

\item{tile_max_count}{Maximum value in the tile counts matrix. If not null, tile counts higher than this will be clipped to \code{tile_max_count}.
Equivalent to \code{ceiling} argument of \code{ArchR::addGeneScoreMatrix()}}

\item{scale_factor}{If not null, counts for each cell will be scaled to sum to \code{scale_factor}. Equivalent to \code{scaleTo} argument of \code{ArchR::addGeneScoreMatrix()}}

\item{tile_matrix_path}{Path of a directory where the intermediate tile matrix will be saved}
}
\value{
\strong{gene_score_weights_archr}

Weight matrix of dimension genes x tiles

\strong{gene_score_archr}

Gene score matrix of dimension genes x cells.
}
\description{
Gene activity scores can be calculated as a distance-weighted sum of per-tile accessibility.
The tile weights for each gene can be represented as a sparse matrix of dimension genes x tiles.
If we multiply this weight matrix by a corresponding tile matrix (tiles x cells), then we can
get a gene activity score matrix of genes x cells. \code{gene_score_weights_archr()} calculates the
weight matrix (best if you have a pre-computed tile matrix), while \code{gene_score_archr()} provides
a easy-to-use wrapper.
}
\details{
\strong{gene_score_weights_archr}:

Given a set of tile coordinates and distances returned by \code{gene_score_tiles_archr()},
calculate a weight matrix of dimensions genes x tiles. This matrix can be
multiplied with a tile matrix to obtain ArchR-compatible gene activity scores.
}
\examples{
## Prep data
reference_dir <- file.path(tempdir(), "references")
frags <- get_demo_frags()
genes <- read_gencode_genes(
  reference_dir,
  release="42", 
  annotation_set = "basic", 
) \%>\% dplyr::filter(chr \%in\% c("chr4", "chr11"))
blacklist <- read_encode_blacklist(reference_dir, genome="hg38") \%>\% dplyr::filter(chr \%in\% c("chr4", "chr11"))
chrom_sizes <- read_ucsc_chrom_sizes(reference_dir, genome="hg38") \%>\% dplyr::filter(chr \%in\% c("chr4", "chr11"))
chrom_sizes$tile_width = 500


#######################################################################
## gene_score_weights_archr() example
## Get gene score weight matrix (genes x tiles)
gene_score_weights <- gene_score_weights_archr(
    genes, chrom_sizes, blacklist
)

## Get tile matrix (tiles x cells)
tiles <- tile_matrix(frags, chrom_sizes, mode = "fragments")

## Get gene scores per cell 
gene_score_weights \%*\% tiles
#######################################################################
#######################################################################
## gene_score_archr() example
## This is a wrapper that creates both the gene score weight 
## matrix and tile matrix together
gene_score_archr(frags, genes, chrom_sizes, blacklist)
#######################################################################
}
