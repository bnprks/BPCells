% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix.R
\name{transpose_storage_order}
\alias{transpose_storage_order}
\title{Transpose the storage order for a matrix}
\usage{
transpose_storage_order(
  matrix,
  outdir = tempfile("transpose"),
  tmpdir = tempdir(),
  load_bytes = 4194304L,
  sort_bytes = 1073741824L
)
}
\arguments{
\item{matrix}{Input matrix}

\item{outdir}{Directory to store the output}

\item{tmpdir}{Temporary directory to use for intermediate storage}

\item{load_bytes}{The minimum contiguous load size during the merge sort passes}

\item{sort_bytes}{The amount of memory to allocate for re-sorting chunks of entries}
}
\value{
MatrixDir object with a copy of the input matrix, but the storage order flipped
}
\description{
Transpose the storage order for a matrix
}
\details{
This re-sorts the entries of a matrix to change the storage order
from row-major to col-major. For large matrices, this can be slow -- around 2
minutes to transpose a 500k cell RNA-seq matrix The default load_bytes (4MiB)
and sort_bytes (1GiB) parameters allow ~85GB of data to be sorted with two
passes through the data, and ~7.3TB of data to be sorted in three passes
through the data.
}
\examples{
mat <- matrix(rnorm(50), nrow = 10, ncol = 5)
rownames(mat) <- paste0("gene", seq_len(10))
colnames(mat) <- paste0("cell", seq_len(5))
mat <- mat \%>\% as("dgCMatrix") \%>\% as("IterableMatrix")
mat

## A regular transpose operation switches a user's rows and cols 
t(mat)

## Running `transpose_storage_order()` instead changes whether 
## the storage is in row-major or col-major,
## but does not switch the rows and cols
transpose_storage_order(mat)
}
