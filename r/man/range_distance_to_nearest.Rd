% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geneScores.R
\name{range_distance_to_nearest}
\alias{range_distance_to_nearest}
\title{Find signed distance to nearest genomic ranges}
\usage{
range_distance_to_nearest(
  ranges,
  addArchRBug = FALSE,
  zero_based_coords = !is(ranges, "GRanges")
)
}
\arguments{
\item{ranges}{Genomic regions given as GRanges, data.frame, or list. See \code{help("genomic-ranges-like")} for details on format and coordinate systems. Required attributes:
\itemize{
\item \code{chr}, \code{start}, \code{end}: genomic position
\item \code{strand}: +/- or TRUE/FALSE for positive or negative strand
}}

\item{addArchRBug}{boolean to reproduce ArchR's bug that incorrectly handles nested genes}

\item{zero_based_coords}{If true, coordinates start and 0 and the end coordinate is not included in the range.
If false, coordinates start at 1 and the end coordinate is included in the range}
}
\value{
A 2-column data.frame with columns upstream and downstream, containing
the distances to the nearest neighbor in the respective directions.
For ranges on \code{+} or \code{*} strand, distance is calculated as:
\itemize{
\item upstream = \code{max(start(range) - end(upstreamNeighbor), 0)}
\item downstream = \code{max(start(downstreamNeighbor) - end(range), 0)}
}

For ranges on \code{-} strand, the definition of upstream and downstream is flipped.
Note that this definition of distance is one off from
\code{GenomicRanges::distance()}, as ranges that neighbor but don't overlap are given
a distance of 1 rather than 0.
}
\description{
Given a set of genomic ranges, find the distance to the nearest neighbors both
upstream and downstream.
}
\examples{
## Prep data
ranges <- tibble::tibble(
 chr = "chr1",
 start = seq(10, 410, 100),
 end = start + 50,
 strand = "+"
)
## Add one range that is completely nested in the other ranges
ranges_with_nesting <- ranges \%>\% 
 tibble::add_row(chr = "chr1", start = 11, end = 20, strand = "+")


## Get range distance to nearest
range_distance_to_nearest(ranges_with_nesting)
}
