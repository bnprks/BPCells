% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fragments.R
\name{select_regions}
\alias{select_regions}
\title{Subset fragments by genomic region}
\usage{
select_regions(
  fragments,
  ranges,
  invert_selection = FALSE,
  zero_based_coords = !is(ranges, "GRanges")
)
}
\arguments{
\item{fragments}{Input fragments object.}

\item{ranges}{Peaks/ranges to overlap, given as GRanges, data.frame, or list. See \code{help("genomic-ranges-like")} for details on format and coordinate systems. Required attributes:
\itemize{
\item \code{chr}, \code{start}, \code{end}: genomic position
}}

\item{invert_selection}{If TRUE, select fragments \emph{not} overlapping selected regions
instead of only fragments overlapping the selected regions.}

\item{zero_based_coords}{Whether to convert the ranges from a 1-based end-inclusive
coordinate system to a 0-based end-exclusive coordinate system. Defaults to true
for GRanges and false for other formats
(see this \href{https://web.archive.org/web/20210920203703/http://genome.ucsc.edu/blog/the-ucsc-genome-browser-coordinate-counting-systems/}{archived UCSC blogpost})}
}
\value{
Fragments object filtered according to the selected regions
}
\description{
Fragments can be subset based on overlapping (or not overlapping) a set of regions
}
\examples{
frags <- tibble::tibble(
  chr = "chr1",
  start = seq(10, 260, 50),
  end = start + seq(5, 30, 5),
  cell_id = "cell1"
) 
frags
frags <- frags \%>\% convert_to_fragments()

region <- tibble::tibble(
  chr = "chr1",
  start = 60,
  end = 130
) \%>\% as("GRanges")

## Select ranges overlapping with region
select_regions(frags, region) \%>\% as("GRanges")

## Select ranges not overlapping with region
select_regions(frags, region, invert_selection = TRUE) \%>\% as("GRanges")
}
