% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transforms.R
\name{regress_out}
\alias{regress_out}
\title{Regress out unwanted variation}
\usage{
regress_out(mat, latent_data, prediction_axis = c("row", "col"))
}
\arguments{
\item{mat}{Input IterableMatrix}

\item{latent_data}{Data to regress out, as a \code{data.frame} where each column is a
variable to regress out.}

\item{prediction_axis}{Which axis corresponds to prediction outputs from the linear models
(e.g. the gene axis in typical single cell analysis). Options include "row" (default) and "col".}
}
\value{
IterableMatrix
}
\description{
Regress out the effects of confounding variables using a linear least squares regression model.
}
\details{
Conceptually, \code{regress_out} calculates a linear least squares best fit model for each row of the matrix.
(Or column if \code{prediction_axis} is \code{"col"}).
The input data for each regression model are the columns of \code{latent_data}, and each model tries to
predict the values in the corresponding row (or column) of \code{mat}. After fitting each model, \code{regress_out}
will subtract the model predictions from the input values, aiming to only retain effects that are
not explained by the variables in \code{latent_data}.

These models can be fit efficiently since they all share the same input data and so most of the
calculations for the closed-form best fit solution are shared. A QR factorization of the
model matrix and a dense matrix-vector multiply are sufficient to fully calculate the residual values.

\emph{Efficiency considerations}: As the output matrix is dense rather than sparse, mean and variance calculations may
run comparatively slowly. However, PCA and matrix/vector multiply operations can be performed at nearly the same
cost as the input matrix due to mathematical simplifications. Memory usage scales with \verb{n_features * ((nrow(mat) + ncol(mat))}.
Generally, \code{n_features == ncol(latent_data)}, but for categorical variables in \code{latent_data}, each
category will be expanded into its own indicator variable. Memory usage will therefore be higher when
using categorical input variables with many (i.e. >100) distinct values.
}
