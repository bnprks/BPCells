% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singlecell_utils.R
\name{lsi}
\alias{lsi}
\title{Perform latent semantic indexing (LSI) on a matrix.}
\usage{
lsi(
  mat,
  z_score_norm = TRUE,
  n_dimensions = 50L,
  scale_factor = 10000,
  save_lsi = FALSE,
  threads = 1L
)
}
\arguments{
\item{mat}{(IterableMatrix) dimensions features x cells}

\item{z_score_norm}{(logical) If TRUE, z-score normalize the matrix before PCA.}

\item{n_dimensions}{(integer) Number of dimensions to keep during PCA.}

\item{scale_factor}{(integer) Scale factor for the tf-idf log transform.}

\item{save_lsi}{(logical) If TRUE, save the SVD attributes for the matrix, as well as the idf normalization vector.}

\item{threads}{(integer) Number of threads to use.}
}
\value{
\itemize{
\item If save_lsi is FALSE, return a dgCMatrix of shape (n_dimensions, ncol(mat)).
\item If save_lsi is TRUE, return a list with the following elements:
\item \strong{pca_res}: dgCMatrix of shape (n_dimensions, ncol(mat))
\item \strong{svd_attr}: List of SVD attributes
\item \strong{idf}: Inverse document frequency vector
}
}
\description{
Perform latent semantic indexing (LSI) on a matrix.
}
\details{
Compute LSI through first doing a log(tf-idf) transform, z-score normalization, then PCA.  Tf-idf implementation is from Stuart & Butler et al. 2019.

Running on a 2600 cell dataset with 50000 peaks and 4 threads, as an example:
\itemize{
\item 17.1 MB memory usage, 25.1 seconds runtime
}
}
