% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singlecell_utils.R
\name{lsi}
\alias{lsi}
\title{Perform latent semantic indexing (LSI) on a matrix.}
\usage{
lsi(
  mat,
  n_dimensions = 50L,
  scale_factor = 10000,
  save_in_memory = FALSE,
  threads = 1L
)
}
\arguments{
\item{mat}{(IterableMatrix) dimensions features x cells}

\item{n_dimensions}{(integer) Number of dimensions to keep during PCA.}

\item{scale_factor}{(integer) Scale factor for the tf-idf log transform.}

\item{save_in_memory}{(logical) If TRUE, save the log(tf-idf) matrix in memory.
If FALSE, save to a temporary location in disk.  Saving in memory will result in faster downstream operations,
but will require in higher memory usage.  Comparison of memory usage and speed is in the details section.}

\item{threads}{(integer) Number of threads to use.}
}
\value{
dgCMatrix of shape (n_dimensions, ncol(mat)).
}
\description{
Perform latent semantic indexing (LSI) on a matrix.
}
\details{
Compute LSI through first doing a log(tf-idf) transform, z-score normalization, then PCA.  Tf-idf implementation is from Stuart & Butler et al. 2019.

** Saving in memory vs disk: **
Following the log(tf-idf) transform, the matrix is stored into a temporary location, as the next step will break the sparsity pattern of the matrix.
This is done to prevent re-calculation of queued operations during PCA optimization.

Running on a 2600 cell dataset with 50000 peaks and 4 threads, as an example:
\itemize{
\item Saving in memory: 233 MB memory usage, 22.7 seconds runtime
\item Saving in disk: 17.1 MB memory usage, 25.1 seconds runtime
}
}
