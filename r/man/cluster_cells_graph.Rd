% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{cluster_cells_graph}
\alias{cluster_cells_graph}
\title{Cluster cell embeddings using a KNN graph-based algorithm}
\usage{
cluster_cells_graph(
  mat,
  knn_method = knn_hnsw,
  knn_to_graph_method = knn_to_geodesic_graph,
  cluster_graph_method = cluster_graph_leiden,
  threads = 0L,
  verbose = FALSE
)
}
\arguments{
\item{mat}{(matrix) Cell embeddings matrix of shape \verb{(cells x n_embeddings)}}

\item{knn_method}{(function) Function to that takes an embedding matrix as the first argument and returns a k nearest neighbors (KNN) object.
For example, \code{knn_hnsw()}, \code{knn_annoy()}, or a parameterized version (see Details).}

\item{knn_to_graph_method}{(function) Function that takes a KNN object and returns a graph as an undirected graph (lower-triangular dgCMatrix adjacency matrix).
For example, \code{knn_to_graph()}, \code{knn_to_snn_graph()}, \code{knn_to_geodesic_graph()}, or a parameterized version (see Details).}

\item{cluster_graph_method}{(function) Function that takes an undirected graph of cell similarity and returns a factor with cluster assignments for each cell.
For example, \code{cluster_graph_leiden()}, \code{cluster_graph_louvain()}, \code{cluster_graph_seurat()}, or a parameterized version (see Details).}

\item{threads}{(integer) Number of threads to use in \code{knn_method}, \code{knn_to_graph_method} and \code{cluster_graph_method}.  If these functions do not utilize
a \code{threads} argument, this is silently ignored.}

\item{verbose}{(logical) Whether to print progress information in \code{knn_method}, \code{knn_to_graph_method} and \code{cluster_graph_method}.  If these functions do not utilize
a \code{verbose} argument, this is silently ignored.}
}
\value{
(factor) Factor vector containing the cluster assignment for each cell.
}
\description{
Take in a cell embedding matrix, then find k nearest neighbors (KNN) for each cell, convert the
KNN into a graph (adjacency matrix), then run a graph-based clustering algorithm. Each of these
steps can be customized by passing a function that performs the step (see details).
}
\details{
\strong{Customizing clustering steps}

All of the BPCells functions named like \verb{knn_*}, \verb{knn_to_graph_*}, and \verb{cluster_graph_*} support customizing parameters
via partial function application. For example, look for 20 neighbors during the k nearest neighbors search, setting
\code{knn_method=knn_hnsw(k=20)} is a convenient shortcut for \code{knn_method=function(x) knn_hnsw(x, k=20)}. Similarly, lowering the
default clustering resolution can be done as \code{cluster_graph_method=cluster_graph_louvain(resolution=0.5)}. This works because
all these functions are written to return a partially parameterized copy of themselves as a function object when their
first argument is missing.

For even more advanced customization, users can manually call the \code{knn}, \code{knn_to_graph}, and \code{cluster_graph} methods rather
than using \code{cluster_cells_graph()} as a convenient wrapper.

\strong{Implementing custom clustering steps}

The required interfaces for each step are as follows:

\strong{knn_method}: First argument is a matrix of cell embeddings, shape \verb{(cells x n_embeddings)}.
Returns a named list of two matrices of dimension (cells x k):
\itemize{
\item \code{idx}: Neighbor indices, where \code{idx[c, n]} is the index of the
nth nearest neighbor to cell \code{c}.
\item \code{dist}: Neighbor distances, where \code{dist[c, n]} is the distance between
cell \code{c} and its nth nearest neighbor.
Self-neighbors are allowed, so with sufficient search effort \code{idx[c,1] == c} for nearly all cells.
}

\strong{knn_to_graph_method}: First argument is a KNN object as returned by \code{knn_method}.
Returns a weighted similarity graph as a lower triangular sparse adjacency matrix (\code{dgCMatrix}).
For cells \code{i} and \code{j}, their similarity score is in \code{adjacency_mat[max(i,j), min(i,j)]}.

\strong{cluster_graph_method}: First argument is a weighted similarity graph as returned by \code{knn_to_graph_method}.
Returns a factor vector of length \code{cells} with a cluster assignment for each cell.
}
\seealso{
\code{knn_hnsw()} \code{knn_annoy()} \code{knn_to_graph()} \code{knn_to_snn_graph()} \code{knn_to_geodesic_graph()} \code{cluster_graph_leiden()} \code{cluster_graph_louvain()} \code{cluster_graph_seurat()}
}
