% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transforms.R
\name{normalize_log}
\alias{normalize_log}
\alias{normalize_tfidf}
\title{Normalization helper functions}
\usage{
normalize_log(mat, scale_factor = 10000, threads = 1L)

normalize_tfidf(mat, feature_means = NULL, scale_factor = 10000, threads = 1L)
}
\arguments{
\item{mat}{(IterableMatrix) Counts matrix with dimensions \verb{(features x cells)}.}

\item{scale_factor}{(numeric) Scaling factor to multiply matrix by prior to normalization (see formulas below).}

\item{threads}{(integer) Number of threads to use.}

\item{feature_means}{(numeric, optional) Pre-calculated means of the features to normalize by (\code{rowMeans(mat)} by default).
If \code{feature_means} has names and \code{mat} has row names, match values by name.
Otherwise, assume \code{feature_means} has the same length and ordering as the matrix rows.}
}
\value{
Consider a matrix \eqn{X}, where the row index \eqn{i} refers to each feature
and the column index \eqn{j} refers to each cell. For each element \eqn{{x}_{ij} \in X}, the
normalized value \eqn{\tilde{x}_{ij}} is calculated as:
\itemize{
\item \code{normalize_log}: \eqn{\tilde{x}_{ij} = \log(\frac{x_{ij} \cdot \text{scaleFactor}}{\text{colSum}_j} + 1)}
}

\itemize{
\item \code{normalize_tfidf}: \eqn{\tilde{x}_{ij} = \log(\frac{x_{ij} \cdot \text{scaleFactor}}{\text{rowMean}_i\cdot \text{colSum}_j} + 1)}
}
}
\description{
Apply standard normalizations to a \verb{(features x cells)} counts matrix.
}
\details{
\strong{Passing to \code{normalize} parameters with non-default arguments}

If the \code{mat} argument is missing, returns a "partial" function: a copy of the original function but with most arguments pre-defined.
This can be used to customize \code{normalize} parameters in other single cell functions in BPCells (e.g. \code{select_features_mean()}).

\strong{Related functions from other packages}
\itemize{
\item \code{normalize_log}: Corresponds to \code{Seurat::NormalizeData()} with its default "LogNormalize" method.
}

\itemize{
\item \code{normalize_tfidf}: This follows the formula from Stuart, Butler et al. 2019, matching the default behavior of \code{Signac::RunTFIDF()}. This also matches the normalization used within \code{ArchR::addIterativeLSI()}, but with \code{binarize = FALSE}.
}
}
\examples{
set.seed(12345)
mat <- matrix(rpois(4*5, lambda=1), nrow=4, ncol=5)
mat

mat <- as(mat, "IterableMatrix")


#######################################################################
## normalize_log() example
normalize_log(mat)

## normalization functions can also be called with partial arguments 
partial_log <- normalize_log(scale_factor = 1e5)
partial_log

partial_log(mat)
#######################################################################
#######################################################################
## normalize_tfidf() example
normalize_tfidf(mat)
#######################################################################
}
