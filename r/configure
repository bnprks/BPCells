#!/bin/bash

if [ -z $BPCELLS_DEBUG_INSTALL ]; then 
    exec 3>/dev/null
else
    exec 3>&1
    set -x
fi


# This curl request helps count daily installs prior to CRAN release:
# No identifiable information or IP addresses are saved, and server logs are
# deleted every 14 days. More information on data privacy policy: https://plausible.io/data-policy

# To skip counting your installation, either delete the following line, 
# or set the CI or ENABLE_INSTALL_COUNTING environment variables ahead of installation.
if [ -z "$CI" ]; then ENABLE_INSTALL_COUNTING=${ENABLE_INSTALL_COUNTING:-yes}; fi

if [ "$ENABLE_INSTALL_COUNTING" == "yes" ]; then
    curl --silent "https://plausible.benparks.net/flask-plausible/bpcells-configure" > /dev/null 2> /dev/null \
        || true
    echo "Recording install count metrics"
else
    echo "Skipping install count metrics"
fi

# Test compiling a simple hdf5 program to check for compatibility
CC=$("${R_HOME}/bin/R" CMD config CC)
CXX=$("${R_HOME}/bin/R" CMD config CXX)

ENV_CFLAGS="${CFLAGS-}"
ENV_LDFLAGS="${LDFLAGS-}"
CFLAGS="$("${R_HOME}/bin/R" CMD config CFLAGS) $ENV_CFLAGS"
CXXFLAGS="$("${R_HOME}/bin/R" CMD config CXXFLAGS) $ENV_CFLAGS"
LDFLAGS="$("${R_HOME}/bin/R" CMD config LDFLAGS) $ENV_LDFLAGS"
############################
# HDF5 compatibility check
############################

echo "Testing hdf5 by compiling example program..."

# Vanilla install test
HDF5_CFLAGS=""
HDF5_LIBS="-lhdf5"
HDF5_OK=""
$CC tools/h5write.c $CFLAGS $LDFLAGS $HDF5_CFLAGS $HDF5_LIBS -o tools/h5write 2>&3 && HDF5_OK="yes";

# pkg-config flags
if [ -z $HDF5_OK ]; then
    printf "\n\nRetrying with pkg-config flags...\n"
    if HDF5_CFLAGS="$(pkg-config hdf5 --cflags 2>&3)" && \
        HDF5_LIBS="$(pkg-config hdf5 --libs 2>&3)"; then
        $CC tools/h5write.c $CFLAGS $LDFLAGS $HDF5_CFLAGS $HDF5_LIBS -o tools/h5write 2>&3 && HDF5_OK="yes";
    else
        echo "Error running 'pkg-config hdf5 --cflags --libs'"
    fi
fi

# h5cc -showconfig flags.
# This is adapted from the hdf5r configure scripts:
# https://github.com/hhoeflin/hdf5r/blob/master/inst/m4/ax_lib_hdf5.m4
# The basic idea is to scrape -I, -L, -l, and -rpath arguments found from running h5cc -show and h5cc -showconfig
if [ -z $HDF5_OK ]; then
    printf "\n\nSearching for config information with h5cc -showconfig and h5cc -show...\n"
    if H5CC_CONFIG=$(h5cc -showconfig 2>&3) && \
        H5CC_CONFIG=$(echo "$H5CC_CONFIG" | awk -F: '/FLAGS|Extra libraries:/ {printf("%s ", $2)}' 2>&3) &&\
        H5CC_CONFIG2=$(h5cc -show); then
        
        HDF5_CFLAGS=""
        HDF5_LIBS=""

        HDF5_RPATH_LAST_ARG="false"
        # Add arguments one at a time to the flags, assuming they aren't already present
        # We need some special handling of the fact that -rpath can be specified like either:
        #  "-Wl,-rpath -Wl,/my/dir" or "-Wl,-rpath,/my/dir" or "-Wl,-rpath=/my/dir"
        for arg in $H5CC_CONFIG $H5CC_CONFIG2; do
          case "$arg" in
            -I*) ! expr "$HDF5_CFLAGS" : ".*${arg}" > /dev/null && HDF5_CFLAGS="$HDF5_CFLAGS $arg"
                ;;
            -L*) ! expr "$HDF5_LIBS" : ".*${arg}" > /dev/null && HDF5_LIBS="$HDF5_LIBS $arg"
              ;;
            -l*) ! expr "$HDF5_LIBS" : ".*${arg}" > /dev/null && HDF5_LIBS="$HDF5_LIBS $arg"
              ;;
            -Wl,-rpath) HDF5_RPATH_LAST_ARG="true"
              ;;
            -Wl,-rpath*) HDF5_LIBS="$HDF5_LIBS $arg"
              ;;
            -Wl,*) expr "$HDF5_RPATH_LAST_ARG" = "true" >/dev/null && HDF5_RPATH_LAST_ARG="false" && ! expr "$HDF5_LIBS" : ".*${arg}" > /dev/null && HDF5_LIBS="$HDF5_LIBS -Wl,-rpath $arg"
              ;;
          esac
        done
        HDF5_LIBS="$HDF5_LIBS -lhdf5"
        $CC tools/h5write.c $CFLAGS $LDFLAGS $HDF5_CFLAGS $HDF5_LIBS -o tools/h5write 2>&3 && HDF5_OK="yes";
    else
        echo "Failure running either 'h5cc -show' or: 'h5cc -showconfig | awk -F: '/FLAGS|Extra libraries:/ {printf(\"%s \", \$2)}'"
    fi
fi

# conda env
if [ -z $HDF5_OK ]; then
    printf "\n\nSearching for hdf5 in a conda env...\n"
    if [ -z "$CONDA_PREFIX" ] ; then
        echo "no conda environment found in '\$CONDA_PREFIX'"
    else
        HDF5_CFLAGS="-I$CONDA_PREFIX/include"
        HDF5_LIBS="-Wl,-rpath,$CONDA_PREFIX/lib -L$CONDA_PREFIX/lib -lhdf5"
        $CC tools/h5write.c $CFLAGS $LDFLAGS $HDF5_CFLAGS $HDF5_LIBS -o tools/h5write 2>&3 && HDF5_OK="yes";
    fi
fi

if [ -z $HDF5_OK ]; then
    printf "\n\nUnable to locate libhdf5. Please install manually or edit compiler flags.\n"
    exit 1
fi

echo "Found working hdf5"
echo "HDF5_CFLAGS='${HDF5_CFLAGS}'"
echo "HDF5_LIBS='${HDF5_LIBS}'"

############################
# C++17 filesystem check
############################
CXX17_OK=""
CXX_FS_FLAG=""
printf "\nTesting C++17 filesystem feature support..."
$CXX tools/cxx17_filesystem.cc $CXXFLAGS $LDFLAGS -std=c++17 $CXX_FS_FLAG -o tools/cxx17_filesystem 2>&3 && CXX17_OK="yes";
if [ -z $CXX17_OK ]; then
    # Compiler support flag for gcc
    CXX_FS_FLAG="-lstdc++fs"
    $CXX tools/cxx17_filesystem.cc $CXXFLAGS $LDFLAGS -std=c++17 $CXX_FS_FLAG -o tools/cxx17_filesystem 2>&3 && CXX17_OK="yes";
    if [ ! -z $CXX17_OK ]; then
        printf "\nWarning: your compiler version is old, and may run in to compile errors with BPCells.\n"
        printf "Consider installing a newer compiler version and setting CC and CXX in ~/.R/Makevars\n"
        printf "\nUsed fallback compatibility flags for C++17 std::filesystem support: $CXX_FS_FLAG\n"
    fi
fi

if [ -z $CXX17_OK ]; then
    # Compiler support flag for llvm
    CXX_FS_FLAG="-lc++fs"
    $CXX tools/cxx17_filesystem.cc $CXXFLAGS $LDFLAGS -std=c++17 $CXX_FS_FLAG -o tools/cxx17_filesystem 2>&3 && CXX17_OK="yes";
    if [ ! -z $CXX17_OK ]; then
        printf "\nWarning: your compiler version is old, and may run in to compile errors with BPCells.\n"
        printf "Consider installing a newer compiler version and setting CC and CXX in ~/.R/Makevars\n"
        printf "\nUsed fallback compatibility flags for C++17 std::filesystem support: $CXX_FS_FLAG\n"
    fi
fi

if [ -z $CXX17_OK ]; then
    printf "\n\nUnable to compile program with C++17 std::filesystem.\nPlease install a newer compiler version and set CC and CXX in ~/.R/Makevars\n"
    exit 1
fi

############################
# Build Highway SIMD library
############################
printf "\nTesting availability of highway SIMD library..."
HWY_OK=""
HWY_CFLAGS="-Ibpcells-cpp"
HWY_LIBS="-lhwy"
$CXX tools/hwy-test.cpp $CXXFLAGS $LDFLAGS 2>&3 && HWY_OK="yes";
if [ -z $HWY_OK ]; then
    if [ ! -f tools/highway/lib/libhwy.a ]; then
        printf "\nBuilding highway SIMD library from source\n"
        CXX=$CXX bash src/vendor/highway/manual-build/build_highway.sh src/vendor/highway tools/highway && HWY_OK="yes";
    else
        printf "\nUsing cached highway build\n"
        HWY_OK="yes"
    fi
    HWY_CFLAGS="$HWY_CFLAGS -I../tools/highway/include"
    HWY_LIBS="-L../tools/highway/lib -lhwy"
fi
if [ -z $CXX17_OK ]; then
    printf "\n\nUnable to build highway SIMD library from source\n"
    exit 1
fi

# Make substitutions in Makevars.in
sed \
    -e "s|%HDF5_CFLAGS%|${HDF5_CFLAGS}|g" \
    -e "s|%HDF5_LIBS%|${HDF5_LIBS}|g" \
    -e "s|%CXX_FS_FLAG%|${CXX_FS_FLAG}|g" \
    -e "s|%HWY_CFLAGS%|${HWY_CFLAGS}|g" \
    -e "s|%HWY_LIBS%|${HWY_LIBS}|g" \
    -e "s|%ENV_CFLAGS%|${ENV_CFLAGS}|g" \
    -e "s|%ENV_LDFLAGS%|${ENV_LDFLAGS}|g" \
    src/Makevars.in > src/Makevars

if [ "$ENABLE_INSTALL_COUNTING" == "yes" ]; then
    curl --silent https://plausible.benparks.net/flask-plausible/bpcells-configure-success > /dev/null 2> /dev/null \
        || true
fi
