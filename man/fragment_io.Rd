% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fragments.R
\name{write_fragments_memory}
\alias{write_fragments_memory}
\alias{write_fragments_dir}
\alias{open_fragments_dir}
\alias{write_fragments_hdf5}
\alias{open_fragments_hdf5}
\title{Read/write BPCells fragment objects}
\usage{
write_fragments_memory(fragments, compress = TRUE)

write_fragments_dir(
  fragments,
  dir,
  compress = TRUE,
  buffer_size = 1024L,
  overwrite = FALSE
)

open_fragments_dir(dir, buffer_size = 1024L)

write_fragments_hdf5(
  fragments,
  path,
  group = "fragments",
  compress = TRUE,
  buffer_size = 8192L,
  chunk_size = 1024L,
  overwrite = FALSE
)

open_fragments_hdf5(path, group = "fragments", buffer_size = 16384L)
}
\arguments{
\item{fragments}{Input fragments object}

\item{compress}{Whether or not to compress the data. With compression, storage size is
be about half the size of a gzip-compressed 10x fragments file.}

\item{dir}{Directory to read/write the data from}

\item{buffer_size}{For performance tuning only. The number of items to be bufferred
in memory before calling writes to disk.}

\item{overwrite}{If \code{TRUE}, write to a temp dir then overwrite existing data. Alternatively,
pass a temp path as a string to customize the temp dir location.}

\item{path}{Path to the hdf5 file on disk}

\item{group}{The group within the hdf5 file to write the data to. If writing
to an existing hdf5 file this group must not already be in use}

\item{chunk_size}{For performance tuning only. The chunk size used for the HDF5 array storage.}
}
\value{
Fragment object
}
\description{
BPCells fragments can be read/written in compressed (bitpacked) or
uncompressed form in a variety of storage locations: in memory (as an R
object), in an hdf5 file, or in a directory on disk (containing binary
files).
}
\details{
Saving in a directory on disk is a good default for local analysis, as it
provides the best I/O performance and lowest memory usage. The HDF5 format
allows saving within existing hdf5 files to group data together, and the in
memory format provides the fastest performance in the event memory usage is
unimportant.
}
