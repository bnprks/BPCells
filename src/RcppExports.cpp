// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convert_ulong_to_numeric
NumericVector convert_ulong_to_numeric(const NumericVector& ulong_vec);
RcppExport SEXP _BPCells_convert_ulong_to_numeric(SEXP ulong_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ulong_vec(ulong_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_ulong_to_numeric(ulong_vec));
    return rcpp_result_gen;
END_RCPP
}
// read_integer_vector
IntegerVector read_integer_vector(SEXP input);
RcppExport SEXP _BPCells_read_integer_vector(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(read_integer_vector(input));
    return rcpp_result_gen;
END_RCPP
}
// open_file_reader
SEXP open_file_reader(std::string path);
RcppExport SEXP _BPCells_open_file_reader(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(open_file_reader(path));
    return rcpp_result_gen;
END_RCPP
}
// open_bp128_d1z
SEXP open_bp128_d1z(SEXP data, SEXP idx, SEXP idx_offsets, SEXP starts, uint32_t count);
RcppExport SEXP _BPCells_open_bp128_d1z(SEXP dataSEXP, SEXP idxSEXP, SEXP idx_offsetsSEXP, SEXP startsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx_offsets(idx_offsetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(open_bp128_d1z(data, idx, idx_offsets, starts, count));
    return rcpp_result_gen;
END_RCPP
}
// open_bp128_d1
SEXP open_bp128_d1(SEXP data, SEXP idx, SEXP idx_offsets, SEXP starts, uint32_t count);
RcppExport SEXP _BPCells_open_bp128_d1(SEXP dataSEXP, SEXP idxSEXP, SEXP idx_offsetsSEXP, SEXP startsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx_offsets(idx_offsetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(open_bp128_d1(data, idx, idx_offsets, starts, count));
    return rcpp_result_gen;
END_RCPP
}
// open_bp128_for
SEXP open_bp128_for(SEXP data, SEXP idx, SEXP idx_offsets, uint32_t count);
RcppExport SEXP _BPCells_open_bp128_for(SEXP dataSEXP, SEXP idxSEXP, SEXP idx_offsetsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx_offsets(idx_offsetsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(open_bp128_for(data, idx, idx_offsets, count));
    return rcpp_result_gen;
END_RCPP
}
// simd_vec_version
std::string simd_vec_version();
RcppExport SEXP _BPCells_simd_vec_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(simd_vec_version());
    return rcpp_result_gen;
END_RCPP
}
// simd_sleef_version
std::string simd_sleef_version();
RcppExport SEXP _BPCells_simd_sleef_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(simd_sleef_version());
    return rcpp_result_gen;
END_RCPP
}
// iterate_10x_fragments_cpp
SEXP iterate_10x_fragments_cpp(std::string path, std::string comment);
RcppExport SEXP _BPCells_iterate_10x_fragments_cpp(SEXP pathSEXP, SEXP commentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type comment(commentSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_10x_fragments_cpp(path, comment));
    return rcpp_result_gen;
END_RCPP
}
// write_10x_fragments_cpp
void write_10x_fragments_cpp(std::string path, SEXP fragments, bool append_5th_column);
RcppExport SEXP _BPCells_write_10x_fragments_cpp(SEXP pathSEXP, SEXP fragmentsSEXP, SEXP append_5th_columnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< bool >::type append_5th_column(append_5th_columnSEXP);
    write_10x_fragments_cpp(path, fragments, append_5th_column);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_cpp
SEXP iterate_packed_fragments_cpp(S4 s4);
RcppExport SEXP _BPCells_iterate_packed_fragments_cpp(SEXP s4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_cpp(s4));
    return rcpp_result_gen;
END_RCPP
}
// calculate_end_max_cpp
IntegerVector calculate_end_max_cpp(IntegerVector end, IntegerVector chr_ptr);
RcppExport SEXP _BPCells_calculate_end_max_cpp(SEXP endSEXP, SEXP chr_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr_ptr(chr_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_end_max_cpp(end, chr_ptr));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_cpp
List write_packed_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_write_packed_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(write_packed_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_cpp
SEXP iterate_unpacked_fragments_cpp(S4 s4);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_cpp(SEXP s4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_cpp(s4));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_cpp
List write_unpacked_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_write_unpacked_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(write_unpacked_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// info_fragments_file_cpp
List info_fragments_file_cpp(std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_info_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(info_fragments_file_cpp(dir, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_file_cpp
SEXP iterate_unpacked_fragments_file_cpp(std::string dir, uint32_t buffer_size, StringVector chr_names, StringVector cell_names);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP chr_namesSEXP, SEXP cell_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_names(chr_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type cell_names(cell_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_file_cpp(dir, buffer_size, chr_names, cell_names));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_file_cpp
void write_unpacked_fragments_file_cpp(SEXP fragments, std::string dir, uint32_t buffer_size, bool allow_overwrite);
RcppExport SEXP _BPCells_write_unpacked_fragments_file_cpp(SEXP fragmentsSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    write_unpacked_fragments_file_cpp(fragments, dir, buffer_size, allow_overwrite);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_file_cpp
SEXP iterate_packed_fragments_file_cpp(std::string dir, uint32_t buffer_size, StringVector chr_names, StringVector cell_names);
RcppExport SEXP _BPCells_iterate_packed_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP chr_namesSEXP, SEXP cell_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_names(chr_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type cell_names(cell_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_file_cpp(dir, buffer_size, chr_names, cell_names));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_file_cpp
void write_packed_fragments_file_cpp(SEXP fragments, std::string dir, uint32_t buffer_size, bool allow_overwrite);
RcppExport SEXP _BPCells_write_packed_fragments_file_cpp(SEXP fragmentsSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    write_packed_fragments_file_cpp(fragments, dir, buffer_size, allow_overwrite);
    return R_NilValue;
END_RCPP
}
// info_fragments_hdf5_cpp
List info_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_info_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(info_fragments_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_hdf5_cpp
SEXP iterate_unpacked_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size, StringVector chr_names, StringVector cell_names);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chr_namesSEXP, SEXP cell_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_names(chr_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type cell_names(cell_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_hdf5_cpp(file, group, buffer_size, chr_names, cell_names));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_hdf5_cpp
void write_unpacked_fragments_hdf5_cpp(SEXP fragments, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite);
RcppExport SEXP _BPCells_write_unpacked_fragments_hdf5_cpp(SEXP fragmentsSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    write_unpacked_fragments_hdf5_cpp(fragments, file, group, buffer_size, chunk_size, allow_overwrite);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_hdf5_cpp
SEXP iterate_packed_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size, StringVector chr_names, StringVector cell_names);
RcppExport SEXP _BPCells_iterate_packed_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chr_namesSEXP, SEXP cell_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_names(chr_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type cell_names(cell_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_hdf5_cpp(file, group, buffer_size, chr_names, cell_names));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_hdf5_cpp
void write_packed_fragments_hdf5_cpp(SEXP fragments, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite);
RcppExport SEXP _BPCells_write_packed_fragments_hdf5_cpp(SEXP fragmentsSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    write_packed_fragments_hdf5_cpp(fragments, file, group, buffer_size, chunk_size, allow_overwrite);
    return R_NilValue;
END_RCPP
}
// fragments_identical_cpp
bool fragments_identical_cpp(SEXP fragments1, SEXP fragments2);
RcppExport SEXP _BPCells_fragments_identical_cpp(SEXP fragments1SEXP, SEXP fragments2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments1(fragments1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type fragments2(fragments2SEXP);
    rcpp_result_gen = Rcpp::wrap(fragments_identical_cpp(fragments1, fragments2));
    return rcpp_result_gen;
END_RCPP
}
// scan_fragments_cpp
NumericVector scan_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_scan_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// iterate_peak_matrix_cpp
SEXP iterate_peak_matrix_cpp(SEXP fragments, std::vector<uint32_t> chr, std::vector<uint32_t> start, std::vector<uint32_t> end, StringVector chr_levels, std::string mode);
RcppExport SEXP _BPCells_iterate_peak_matrix_cpp(SEXP fragmentsSEXP, SEXP chrSEXP, SEXP startSEXP, SEXP endSEXP, SEXP chr_levelsSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type end(endSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_peak_matrix_cpp(fragments, chr, start, end, chr_levels, mode));
    return rcpp_result_gen;
END_RCPP
}
// iterate_tile_matrix_cpp
SEXP iterate_tile_matrix_cpp(SEXP fragments, std::vector<uint32_t> chr, std::vector<uint32_t> start, std::vector<uint32_t> end, std::vector<uint32_t> width, StringVector chr_levels);
RcppExport SEXP _BPCells_iterate_tile_matrix_cpp(SEXP fragmentsSEXP, SEXP chrSEXP, SEXP startSEXP, SEXP endSEXP, SEXP widthSEXP, SEXP chr_levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type width(widthSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_tile_matrix_cpp(fragments, chr, start, end, width, chr_levels));
    return rcpp_result_gen;
END_RCPP
}
// get_tile_names_cpp
StringVector get_tile_names_cpp(IntegerVector chr_id, IntegerVector start, IntegerVector end, IntegerVector tile_width, StringVector chr_levels);
RcppExport SEXP _BPCells_get_tile_names_cpp(SEXP chr_idSEXP, SEXP startSEXP, SEXP endSEXP, SEXP tile_widthSEXP, SEXP chr_levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type chr_id(chr_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile_width(tile_widthSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tile_names_cpp(chr_id, start, end, tile_width, chr_levels));
    return rcpp_result_gen;
END_RCPP
}
// get_tile_ranges_cpp
List get_tile_ranges_cpp(IntegerVector chr_id, IntegerVector start, IntegerVector end, IntegerVector tile_width, StringVector chr_levels, NumericVector selection);
RcppExport SEXP _BPCells_get_tile_ranges_cpp(SEXP chr_idSEXP, SEXP startSEXP, SEXP endSEXP, SEXP tile_widthSEXP, SEXP chr_levelsSEXP, SEXP selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type chr_id(chr_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile_width(tile_widthSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type selection(selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tile_ranges_cpp(chr_id, start, end, tile_width, chr_levels, selection));
    return rcpp_result_gen;
END_RCPP
}
// nucleosome_counts_cpp
List nucleosome_counts_cpp(SEXP fragments, uint32_t nuc_width);
RcppExport SEXP _BPCells_nucleosome_counts_cpp(SEXP fragmentsSEXP, SEXP nuc_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nuc_width(nuc_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(nucleosome_counts_cpp(fragments, nuc_width));
    return rcpp_result_gen;
END_RCPP
}
// fragment_lengths_cpp
std::vector<int> fragment_lengths_cpp(SEXP fragments);
RcppExport SEXP _BPCells_fragment_lengths_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(fragment_lengths_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// footprint_matrix_cpp
Eigen::MatrixXd footprint_matrix_cpp(SEXP fragments, std::vector<uint32_t> chr, std::vector<uint32_t> center, std::vector<int32_t> strand, uint32_t flank_width, StringVector chr_levels, std::vector<uint32_t> cell_groups, std::vector<double> cell_weights);
RcppExport SEXP _BPCells_footprint_matrix_cpp(SEXP fragmentsSEXP, SEXP chrSEXP, SEXP centerSEXP, SEXP strandSEXP, SEXP flank_widthSEXP, SEXP chr_levelsSEXP, SEXP cell_groupsSEXP, SEXP cell_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type center(centerSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type flank_width(flank_widthSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type cell_groups(cell_groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cell_weights(cell_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(footprint_matrix_cpp(fragments, chr, center, strand, flank_width, chr_levels, cell_groups, cell_weights));
    return rcpp_result_gen;
END_RCPP
}
// iterate_shift_cpp
SEXP iterate_shift_cpp(SEXP fragments, int32_t shift_start, int32_t shift_end);
RcppExport SEXP _BPCells_iterate_shift_cpp(SEXP fragmentsSEXP, SEXP shift_startSEXP, SEXP shift_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type shift_start(shift_startSEXP);
    Rcpp::traits::input_parameter< int32_t >::type shift_end(shift_endSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_shift_cpp(fragments, shift_start, shift_end));
    return rcpp_result_gen;
END_RCPP
}
// iterate_length_select_cpp
SEXP iterate_length_select_cpp(SEXP fragments, uint32_t min_len, uint32_t max_len);
RcppExport SEXP _BPCells_iterate_length_select_cpp(SEXP fragmentsSEXP, SEXP min_lenSEXP, SEXP max_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type min_len(min_lenSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_len(max_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_length_select_cpp(fragments, min_len, max_len));
    return rcpp_result_gen;
END_RCPP
}
// iterate_chr_index_select_cpp
SEXP iterate_chr_index_select_cpp(SEXP fragments, std::vector<uint32_t> chr_selection);
RcppExport SEXP _BPCells_iterate_chr_index_select_cpp(SEXP fragmentsSEXP, SEXP chr_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr_selection(chr_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_chr_index_select_cpp(fragments, chr_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_chr_name_select_cpp
SEXP iterate_chr_name_select_cpp(SEXP fragments, std::vector<std::string> chr_selection);
RcppExport SEXP _BPCells_iterate_chr_name_select_cpp(SEXP fragmentsSEXP, SEXP chr_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type chr_selection(chr_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_chr_name_select_cpp(fragments, chr_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_index_select_cpp
SEXP iterate_cell_index_select_cpp(SEXP fragments, std::vector<uint32_t> cell_selection);
RcppExport SEXP _BPCells_iterate_cell_index_select_cpp(SEXP fragmentsSEXP, SEXP cell_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type cell_selection(cell_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_index_select_cpp(fragments, cell_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_name_select_cpp
SEXP iterate_cell_name_select_cpp(SEXP fragments, std::vector<std::string> cell_selection);
RcppExport SEXP _BPCells_iterate_cell_name_select_cpp(SEXP fragmentsSEXP, SEXP cell_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cell_selection(cell_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_name_select_cpp(fragments, cell_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_merge_cpp
SEXP iterate_cell_merge_cpp(SEXP fragments, std::vector<uint32_t> group_ids, StringVector group_names);
RcppExport SEXP _BPCells_iterate_cell_merge_cpp(SEXP fragmentsSEXP, SEXP group_idsSEXP, SEXP group_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type group_ids(group_idsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type group_names(group_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_merge_cpp(fragments, group_ids, group_names));
    return rcpp_result_gen;
END_RCPP
}
// iterate_chr_rename_cpp
SEXP iterate_chr_rename_cpp(SEXP fragments, const StringVector& chr_names);
RcppExport SEXP _BPCells_iterate_chr_rename_cpp(SEXP fragmentsSEXP, SEXP chr_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type chr_names(chr_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_chr_rename_cpp(fragments, chr_names));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_rename_cpp
SEXP iterate_cell_rename_cpp(SEXP fragments, const StringVector& cell_names);
RcppExport SEXP _BPCells_iterate_cell_rename_cpp(SEXP fragmentsSEXP, SEXP cell_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type cell_names(cell_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_rename_cpp(fragments, cell_names));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_prefix_cpp
SEXP iterate_cell_prefix_cpp(SEXP fragments, std::string& prefix);
RcppExport SEXP _BPCells_iterate_cell_prefix_cpp(SEXP fragmentsSEXP, SEXP prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prefix(prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_prefix_cpp(fragments, prefix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_region_select_cpp
SEXP iterate_region_select_cpp(SEXP fragments, std::vector<uint32_t> chr, std::vector<uint32_t> start, std::vector<uint32_t> end, StringVector chr_levels, bool invert_selection);
RcppExport SEXP _BPCells_iterate_region_select_cpp(SEXP fragmentsSEXP, SEXP chrSEXP, SEXP startSEXP, SEXP endSEXP, SEXP chr_levelsSEXP, SEXP invert_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type end(endSEXP);
    Rcpp::traits::input_parameter< StringVector >::type chr_levels(chr_levelsSEXP);
    Rcpp::traits::input_parameter< bool >::type invert_selection(invert_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_region_select_cpp(fragments, chr, start, end, chr_levels, invert_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_merge_fragments_cpp
SEXP iterate_merge_fragments_cpp(SEXP fragments_list, std::vector<std::string> chr_order);
RcppExport SEXP _BPCells_iterate_merge_fragments_cpp(SEXP fragments_listSEXP, SEXP chr_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments_list(fragments_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type chr_order(chr_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_merge_fragments_cpp(fragments_list, chr_order));
    return rcpp_result_gen;
END_RCPP
}
// write_matrix_transpose_uint32_t_cpp
SEXP write_matrix_transpose_uint32_t_cpp(SEXP matrix, std::string outdir, std::string tmpdir, uint64_t load_bytes, uint64_t sort_buffer_bytes, bool row_major);
RcppExport SEXP _BPCells_write_matrix_transpose_uint32_t_cpp(SEXP matrixSEXP, SEXP outdirSEXP, SEXP tmpdirSEXP, SEXP load_bytesSEXP, SEXP sort_buffer_bytesSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpdir(tmpdirSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type load_bytes(load_bytesSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type sort_buffer_bytes(sort_buffer_bytesSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_matrix_transpose_uint32_t_cpp(matrix, outdir, tmpdir, load_bytes, sort_buffer_bytes, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_matrix_transpose_float_cpp
SEXP write_matrix_transpose_float_cpp(SEXP matrix, std::string outdir, std::string tmpdir, uint64_t load_bytes, uint64_t sort_buffer_bytes, bool row_major);
RcppExport SEXP _BPCells_write_matrix_transpose_float_cpp(SEXP matrixSEXP, SEXP outdirSEXP, SEXP tmpdirSEXP, SEXP load_bytesSEXP, SEXP sort_buffer_bytesSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpdir(tmpdirSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type load_bytes(load_bytesSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type sort_buffer_bytes(sort_buffer_bytesSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_matrix_transpose_float_cpp(matrix, outdir, tmpdir, load_bytes, sort_buffer_bytes, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_matrix_transpose_double_cpp
SEXP write_matrix_transpose_double_cpp(SEXP matrix, std::string outdir, std::string tmpdir, uint64_t load_bytes, uint64_t sort_buffer_bytes, bool row_major);
RcppExport SEXP _BPCells_write_matrix_transpose_double_cpp(SEXP matrixSEXP, SEXP outdirSEXP, SEXP tmpdirSEXP, SEXP load_bytesSEXP, SEXP sort_buffer_bytesSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpdir(tmpdirSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type load_bytes(load_bytesSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type sort_buffer_bytes(sort_buffer_bytesSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_matrix_transpose_double_cpp(matrix, outdir, tmpdir, load_bytes, sort_buffer_bytes, row_major));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_mem_uint32_t_cpp
SEXP iterate_packed_matrix_mem_uint32_t_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_mem_uint32_t_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_mem_uint32_t_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_mem_uint32_t_cpp
SEXP iterate_unpacked_matrix_mem_uint32_t_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_mem_uint32_t_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_mem_uint32_t_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_mem_float_cpp
SEXP iterate_packed_matrix_mem_float_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_mem_float_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_mem_float_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_mem_float_cpp
SEXP iterate_unpacked_matrix_mem_float_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_mem_float_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_mem_float_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_mem_double_cpp
SEXP iterate_packed_matrix_mem_double_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_mem_double_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_mem_double_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_mem_double_cpp
SEXP iterate_unpacked_matrix_mem_double_cpp(S4 s4, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_mem_double_cpp(SEXP s4SEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_mem_double_cpp(s4, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_matrix_mem_uint32_t_cpp
SEXP write_packed_matrix_mem_uint32_t_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_mem_uint32_t_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_packed_matrix_mem_uint32_t_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_matrix_mem_uint32_t_cpp
SEXP write_unpacked_matrix_mem_uint32_t_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_mem_uint32_t_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_unpacked_matrix_mem_uint32_t_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_matrix_mem_float_cpp
SEXP write_packed_matrix_mem_float_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_mem_float_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_packed_matrix_mem_float_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_matrix_mem_float_cpp
SEXP write_unpacked_matrix_mem_float_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_mem_float_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_unpacked_matrix_mem_float_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_matrix_mem_double_cpp
SEXP write_packed_matrix_mem_double_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_mem_double_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_packed_matrix_mem_double_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_matrix_mem_double_cpp
SEXP write_unpacked_matrix_mem_double_cpp(SEXP matrix, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_mem_double_cpp(SEXP matrixSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    rcpp_result_gen = Rcpp::wrap(write_unpacked_matrix_mem_double_cpp(matrix, row_major));
    return rcpp_result_gen;
END_RCPP
}
// dims_matrix_file_cpp
List dims_matrix_file_cpp(std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_dims_matrix_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dims_matrix_file_cpp(dir, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_file_uint32_t_cpp
SEXP iterate_unpacked_matrix_file_uint32_t_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_file_uint32_t_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_file_uint32_t_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_file_uint32_t_cpp
SEXP iterate_packed_matrix_file_uint32_t_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_file_uint32_t_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_file_uint32_t_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_file_float_cpp
SEXP iterate_unpacked_matrix_file_float_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_file_float_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_file_float_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_file_float_cpp
SEXP iterate_packed_matrix_file_float_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_file_float_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_file_float_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_file_double_cpp
SEXP iterate_unpacked_matrix_file_double_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_file_double_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_file_double_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_file_double_cpp
SEXP iterate_packed_matrix_file_double_cpp(std::string dir, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_file_double_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_file_double_cpp(dir, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_matrix_file_uint32_t_cpp
void write_unpacked_matrix_file_uint32_t_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_file_uint32_t_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_file_uint32_t_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_file_uint32_t_cpp
void write_packed_matrix_file_uint32_t_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_file_uint32_t_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_file_uint32_t_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_unpacked_matrix_file_float_cpp
void write_unpacked_matrix_file_float_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_file_float_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_file_float_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_file_float_cpp
void write_packed_matrix_file_float_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_file_float_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_file_float_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_unpacked_matrix_file_double_cpp
void write_unpacked_matrix_file_double_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_file_double_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_file_double_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_file_double_cpp
void write_packed_matrix_file_double_cpp(SEXP matrix, std::string dir, uint32_t buffer_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_file_double_cpp(SEXP matrixSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_file_double_cpp(matrix, dir, buffer_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// dims_matrix_hdf5_cpp
List dims_matrix_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_dims_matrix_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dims_matrix_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_hdf5_uint32_t_cpp
SEXP iterate_unpacked_matrix_hdf5_uint32_t_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_hdf5_uint32_t_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_hdf5_uint32_t_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_hdf5_uint32_t_cpp
SEXP iterate_packed_matrix_hdf5_uint32_t_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_hdf5_uint32_t_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_hdf5_uint32_t_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_hdf5_float_cpp
SEXP iterate_unpacked_matrix_hdf5_float_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_hdf5_float_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_hdf5_float_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_hdf5_float_cpp
SEXP iterate_packed_matrix_hdf5_float_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_hdf5_float_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_hdf5_float_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_matrix_hdf5_double_cpp
SEXP iterate_unpacked_matrix_hdf5_double_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_unpacked_matrix_hdf5_double_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_matrix_hdf5_double_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// iterate_packed_matrix_hdf5_double_cpp
SEXP iterate_packed_matrix_hdf5_double_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names, uint32_t row_count);
RcppExport SEXP _BPCells_iterate_packed_matrix_hdf5_double_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP row_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type row_count(row_countSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_matrix_hdf5_double_cpp(file, group, buffer_size, row_names, col_names, row_count));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_matrix_hdf5_uint32_t_cpp
void write_unpacked_matrix_hdf5_uint32_t_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_hdf5_uint32_t_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_hdf5_uint32_t_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_hdf5_uint32_t_cpp
void write_packed_matrix_hdf5_uint32_t_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_hdf5_uint32_t_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_hdf5_uint32_t_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_unpacked_matrix_hdf5_float_cpp
void write_unpacked_matrix_hdf5_float_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_hdf5_float_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_hdf5_float_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_hdf5_float_cpp
void write_packed_matrix_hdf5_float_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_hdf5_float_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_hdf5_float_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_unpacked_matrix_hdf5_double_cpp
void write_unpacked_matrix_hdf5_double_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_unpacked_matrix_hdf5_double_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_unpacked_matrix_hdf5_double_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// write_packed_matrix_hdf5_double_cpp
void write_packed_matrix_hdf5_double_cpp(SEXP matrix, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size, bool allow_overwrite, bool row_major);
RcppExport SEXP _BPCells_write_packed_matrix_hdf5_double_cpp(SEXP matrixSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP, SEXP allow_overwriteSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_overwrite(allow_overwriteSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    write_packed_matrix_hdf5_double_cpp(matrix, file, group, buffer_size, chunk_size, allow_overwrite, row_major);
    return R_NilValue;
END_RCPP
}
// dims_matrix_10x_hdf5_cpp
List dims_matrix_10x_hdf5_cpp(std::string file, uint32_t buffer_size);
RcppExport SEXP _BPCells_dims_matrix_10x_hdf5_cpp(SEXP fileSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dims_matrix_10x_hdf5_cpp(file, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_10x_hdf5_cpp
SEXP iterate_matrix_10x_hdf5_cpp(std::string file, uint32_t buffer_size, const StringVector row_names, const StringVector col_names);
RcppExport SEXP _BPCells_iterate_matrix_10x_hdf5_cpp(SEXP fileSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_10x_hdf5_cpp(file, buffer_size, row_names, col_names));
    return rcpp_result_gen;
END_RCPP
}
// write_matrix_10x_hdf5_cpp
void write_matrix_10x_hdf5_cpp(SEXP matrix, std::string path, StringVector barcodes, StringVector feature_ids, StringVector feature_names, StringVector feature_types, List feature_metadata, uint32_t buffer_size, uint32_t chunk_size);
RcppExport SEXP _BPCells_write_matrix_10x_hdf5_cpp(SEXP matrixSEXP, SEXP pathSEXP, SEXP barcodesSEXP, SEXP feature_idsSEXP, SEXP feature_namesSEXP, SEXP feature_typesSEXP, SEXP feature_metadataSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< StringVector >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type feature_ids(feature_idsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type feature_names(feature_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type feature_types(feature_typesSEXP);
    Rcpp::traits::input_parameter< List >::type feature_metadata(feature_metadataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    write_matrix_10x_hdf5_cpp(matrix, path, barcodes, feature_ids, feature_names, feature_types, feature_metadata, buffer_size, chunk_size);
    return R_NilValue;
END_RCPP
}
// dims_matrix_anndata_hdf5_cpp
List dims_matrix_anndata_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_dims_matrix_anndata_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dims_matrix_anndata_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_anndata_hdf5_cpp
SEXP iterate_matrix_anndata_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size, const StringVector row_names, const StringVector col_names);
RcppExport SEXP _BPCells_iterate_matrix_anndata_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_anndata_hdf5_cpp(file, group, buffer_size, row_names, col_names));
    return rcpp_result_gen;
END_RCPP
}
// read_hdf5_string_cpp
std::vector<std::string> read_hdf5_string_cpp(std::string path, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_read_hdf5_string_cpp(SEXP pathSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(read_hdf5_string_cpp(path, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// hdf5_group_exists_cpp
bool hdf5_group_exists_cpp(std::string path, std::string group);
RcppExport SEXP _BPCells_hdf5_group_exists_cpp(SEXP pathSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(hdf5_group_exists_cpp(path, group));
    return rcpp_result_gen;
END_RCPP
}
// import_matrix_market_cpp
void import_matrix_market_cpp(std::string mtx_path, std::vector<std::string> row_names, std::vector<std::string> col_names, std::string outdir, std::string tmpdir, uint64_t load_bytes, uint64_t sort_buffer_bytes, bool row_major);
RcppExport SEXP _BPCells_import_matrix_market_cpp(SEXP mtx_pathSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP, SEXP outdirSEXP, SEXP tmpdirSEXP, SEXP load_bytesSEXP, SEXP sort_buffer_bytesSEXP, SEXP row_majorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type mtx_path(mtx_pathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type col_names(col_namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpdir(tmpdirSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type load_bytes(load_bytesSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type sort_buffer_bytes(sort_buffer_bytesSEXP);
    Rcpp::traits::input_parameter< bool >::type row_major(row_majorSEXP);
    import_matrix_market_cpp(mtx_path, row_names, col_names, outdir, tmpdir, load_bytes, sort_buffer_bytes, row_major);
    return R_NilValue;
END_RCPP
}
// iterate_matrix_log1p_cpp
SEXP iterate_matrix_log1p_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_log1p_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_log1p_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_log1psimd_cpp
SEXP iterate_matrix_log1psimd_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_log1psimd_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_log1psimd_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_expm1_cpp
SEXP iterate_matrix_expm1_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_expm1_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_expm1_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_expm1simd_cpp
SEXP iterate_matrix_expm1simd_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_expm1simd_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_expm1simd_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_pow_cpp
SEXP iterate_matrix_pow_cpp(SEXP matrix, double exponent);
RcppExport SEXP _BPCells_iterate_matrix_pow_cpp(SEXP matrixSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< double >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_pow_cpp(matrix, exponent));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_powsimd_cpp
SEXP iterate_matrix_powsimd_cpp(SEXP matrix, double exponent);
RcppExport SEXP _BPCells_iterate_matrix_powsimd_cpp(SEXP matrixSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< double >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_powsimd_cpp(matrix, exponent));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_square_cpp
SEXP iterate_matrix_square_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_square_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_square_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_min_cpp
SEXP iterate_matrix_min_cpp(SEXP matrix, double min_val);
RcppExport SEXP _BPCells_iterate_matrix_min_cpp(SEXP matrixSEXP, SEXP min_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< double >::type min_val(min_valSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_min_cpp(matrix, min_val));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_min_by_row_cpp
SEXP iterate_matrix_min_by_row_cpp(SEXP matrix, Eigen::ArrayXXd row_min);
RcppExport SEXP _BPCells_iterate_matrix_min_by_row_cpp(SEXP matrixSEXP, SEXP row_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type row_min(row_minSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_min_by_row_cpp(matrix, row_min));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_min_by_col_cpp
SEXP iterate_matrix_min_by_col_cpp(SEXP matrix, Eigen::ArrayXXd col_min);
RcppExport SEXP _BPCells_iterate_matrix_min_by_col_cpp(SEXP matrixSEXP, SEXP col_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type col_min(col_minSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_min_by_col_cpp(matrix, col_min));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_round_cpp
SEXP iterate_matrix_round_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_round_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_round_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_sctransform_pearson_cpp
SEXP iterate_matrix_sctransform_pearson_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> gene_params, Eigen::Map<Eigen::ArrayXXd> cell_params, Eigen::Map<Eigen::ArrayXd> global_params);
RcppExport SEXP _BPCells_iterate_matrix_sctransform_pearson_cpp(SEXP matrixSEXP, SEXP gene_paramsSEXP, SEXP cell_paramsSEXP, SEXP global_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type gene_params(gene_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type cell_params(cell_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type global_params(global_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_sctransform_pearson_cpp(matrix, gene_params, cell_params, global_params));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_sctransform_pearson_transpose_cpp
SEXP iterate_matrix_sctransform_pearson_transpose_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> cell_params, Eigen::Map<Eigen::ArrayXXd> gene_params, Eigen::Map<Eigen::ArrayXd> global_params);
RcppExport SEXP _BPCells_iterate_matrix_sctransform_pearson_transpose_cpp(SEXP matrixSEXP, SEXP cell_paramsSEXP, SEXP gene_paramsSEXP, SEXP global_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type cell_params(cell_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type gene_params(gene_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type global_params(global_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_sctransform_pearson_transpose_cpp(matrix, cell_params, gene_params, global_params));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_sctransform_pearson_simd_cpp
SEXP iterate_matrix_sctransform_pearson_simd_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> gene_params, Eigen::Map<Eigen::ArrayXXd> cell_params, Eigen::Map<Eigen::ArrayXd> global_params);
RcppExport SEXP _BPCells_iterate_matrix_sctransform_pearson_simd_cpp(SEXP matrixSEXP, SEXP gene_paramsSEXP, SEXP cell_paramsSEXP, SEXP global_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type gene_params(gene_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type cell_params(cell_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type global_params(global_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_sctransform_pearson_simd_cpp(matrix, gene_params, cell_params, global_params));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_sctransform_pearson_transpose_simd_cpp
SEXP iterate_matrix_sctransform_pearson_transpose_simd_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> cell_params, Eigen::Map<Eigen::ArrayXXd> gene_params, Eigen::Map<Eigen::ArrayXd> global_params);
RcppExport SEXP _BPCells_iterate_matrix_sctransform_pearson_transpose_simd_cpp(SEXP matrixSEXP, SEXP cell_paramsSEXP, SEXP gene_paramsSEXP, SEXP global_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type cell_params(cell_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type gene_params(gene_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type global_params(global_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_sctransform_pearson_transpose_simd_cpp(matrix, cell_params, gene_params, global_params));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_scale_cpp
SEXP iterate_matrix_scale_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> row_scale, Eigen::Map<Eigen::ArrayXXd> col_scale);
RcppExport SEXP _BPCells_iterate_matrix_scale_cpp(SEXP matrixSEXP, SEXP row_scaleSEXP, SEXP col_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type row_scale(row_scaleSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type col_scale(col_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_scale_cpp(matrix, row_scale, col_scale));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_shift_cpp
SEXP iterate_matrix_row_shift_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> row_shift);
RcppExport SEXP _BPCells_iterate_matrix_row_shift_cpp(SEXP matrixSEXP, SEXP row_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type row_shift(row_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_shift_cpp(matrix, row_shift));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_shift_cpp
SEXP iterate_matrix_col_shift_cpp(SEXP matrix, Eigen::Map<Eigen::ArrayXXd> col_shift);
RcppExport SEXP _BPCells_iterate_matrix_col_shift_cpp(SEXP matrixSEXP, SEXP col_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type col_shift(col_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_shift_cpp(matrix, col_shift));
    return rcpp_result_gen;
END_RCPP
}
// iterate_csparse_matrix_cpp
SEXP iterate_csparse_matrix_cpp(SEXP matrix, const StringVector row_names, const StringVector col_names);
RcppExport SEXP _BPCells_iterate_csparse_matrix_cpp(SEXP matrixSEXP, SEXP row_namesSEXP, SEXP col_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type col_names(col_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_csparse_matrix_cpp(matrix, row_names, col_names));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_uint32_t_double_cpp
SEXP convert_matrix_uint32_t_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_uint32_t_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_uint32_t_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_uint32_t_float_cpp
SEXP convert_matrix_uint32_t_float_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_uint32_t_float_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_uint32_t_float_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_double_uint32_t_cpp
SEXP convert_matrix_double_uint32_t_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_double_uint32_t_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_double_uint32_t_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_double_float_cpp
SEXP convert_matrix_double_float_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_double_float_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_double_float_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_float_uint32_t_cpp
SEXP convert_matrix_float_uint32_t_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_float_uint32_t_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_float_uint32_t_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix_float_double_cpp
SEXP convert_matrix_float_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_convert_matrix_float_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix_float_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// build_csparse_matrix_double_cpp
SEXP build_csparse_matrix_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_build_csparse_matrix_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(build_csparse_matrix_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_select_uint32_t_cpp
SEXP iterate_matrix_col_select_uint32_t_cpp(SEXP matrix, std::vector<uint32_t> col_selection);
RcppExport SEXP _BPCells_iterate_matrix_col_select_uint32_t_cpp(SEXP matrixSEXP, SEXP col_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type col_selection(col_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_select_uint32_t_cpp(matrix, col_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_select_float_cpp
SEXP iterate_matrix_col_select_float_cpp(SEXP matrix, std::vector<uint32_t> col_selection);
RcppExport SEXP _BPCells_iterate_matrix_col_select_float_cpp(SEXP matrixSEXP, SEXP col_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type col_selection(col_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_select_float_cpp(matrix, col_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_select_double_cpp
SEXP iterate_matrix_col_select_double_cpp(SEXP matrix, std::vector<uint32_t> col_selection);
RcppExport SEXP _BPCells_iterate_matrix_col_select_double_cpp(SEXP matrixSEXP, SEXP col_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type col_selection(col_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_select_double_cpp(matrix, col_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_select_uint32_t_cpp
SEXP iterate_matrix_row_select_uint32_t_cpp(SEXP matrix, std::vector<uint32_t> row_selection);
RcppExport SEXP _BPCells_iterate_matrix_row_select_uint32_t_cpp(SEXP matrixSEXP, SEXP row_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type row_selection(row_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_select_uint32_t_cpp(matrix, row_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_select_float_cpp
SEXP iterate_matrix_row_select_float_cpp(SEXP matrix, std::vector<uint32_t> row_selection);
RcppExport SEXP _BPCells_iterate_matrix_row_select_float_cpp(SEXP matrixSEXP, SEXP row_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type row_selection(row_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_select_float_cpp(matrix, row_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_select_double_cpp
SEXP iterate_matrix_row_select_double_cpp(SEXP matrix, std::vector<uint32_t> row_selection);
RcppExport SEXP _BPCells_iterate_matrix_row_select_double_cpp(SEXP matrixSEXP, SEXP row_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type row_selection(row_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_select_double_cpp(matrix, row_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_bind_uint32_t_cpp
SEXP iterate_matrix_row_bind_uint32_t_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_row_bind_uint32_t_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_bind_uint32_t_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_bind_float_cpp
SEXP iterate_matrix_row_bind_float_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_row_bind_float_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_bind_float_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_row_bind_double_cpp
SEXP iterate_matrix_row_bind_double_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_row_bind_double_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_row_bind_double_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_bind_uint32_t_cpp
SEXP iterate_matrix_col_bind_uint32_t_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_col_bind_uint32_t_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_bind_uint32_t_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_bind_float_cpp
SEXP iterate_matrix_col_bind_float_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_col_bind_float_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_bind_float_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_col_bind_double_cpp
SEXP iterate_matrix_col_bind_double_cpp(SEXP matrix_list);
RcppExport SEXP _BPCells_iterate_matrix_col_bind_double_cpp(SEXP matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix_list(matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_col_bind_double_cpp(matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_multiply_uint32_t_cpp
SEXP iterate_matrix_multiply_uint32_t_cpp(SEXP left, SEXP right);
RcppExport SEXP _BPCells_iterate_matrix_multiply_uint32_t_cpp(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type left(leftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_multiply_uint32_t_cpp(left, right));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_multiply_float_cpp
SEXP iterate_matrix_multiply_float_cpp(SEXP left, SEXP right);
RcppExport SEXP _BPCells_iterate_matrix_multiply_float_cpp(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type left(leftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_multiply_float_cpp(left, right));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_multiply_double_cpp
SEXP iterate_matrix_multiply_double_cpp(SEXP left, SEXP right);
RcppExport SEXP _BPCells_iterate_matrix_multiply_double_cpp(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type left(leftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_multiply_double_cpp(left, right));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_mask_uint32_t_cpp
SEXP iterate_matrix_mask_uint32_t_cpp(SEXP mat, SEXP mask, bool invert);
RcppExport SEXP _BPCells_iterate_matrix_mask_uint32_t_cpp(SEXP matSEXP, SEXP maskSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_mask_uint32_t_cpp(mat, mask, invert));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_mask_float_cpp
SEXP iterate_matrix_mask_float_cpp(SEXP mat, SEXP mask, bool invert);
RcppExport SEXP _BPCells_iterate_matrix_mask_float_cpp(SEXP matSEXP, SEXP maskSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_mask_float_cpp(mat, mask, invert));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_mask_double_cpp
SEXP iterate_matrix_mask_double_cpp(SEXP mat, SEXP mask, bool invert);
RcppExport SEXP _BPCells_iterate_matrix_mask_double_cpp(SEXP matSEXP, SEXP maskSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_mask_double_cpp(mat, mask, invert));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_rank_uint32_t_cpp
SEXP iterate_matrix_rank_uint32_t_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_rank_uint32_t_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_rank_uint32_t_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_rank_float_cpp
SEXP iterate_matrix_rank_float_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_rank_float_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_rank_float_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// iterate_matrix_rank_double_cpp
SEXP iterate_matrix_rank_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_iterate_matrix_rank_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_matrix_rank_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// dense_multiply_right_cpp
Eigen::MatrixXd dense_multiply_right_cpp(SEXP matrix, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _BPCells_dense_multiply_right_cpp(SEXP matrixSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_multiply_right_cpp(matrix, B));
    return rcpp_result_gen;
END_RCPP
}
// dense_multiply_left_cpp
Eigen::MatrixXd dense_multiply_left_cpp(SEXP matrix, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _BPCells_dense_multiply_left_cpp(SEXP matrixSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_multiply_left_cpp(matrix, B));
    return rcpp_result_gen;
END_RCPP
}
// vec_multiply_right_cpp
Eigen::VectorXd vec_multiply_right_cpp(SEXP matrix, Eigen::Map<Eigen::VectorXd> v);
RcppExport SEXP _BPCells_vec_multiply_right_cpp(SEXP matrixSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_multiply_right_cpp(matrix, v));
    return rcpp_result_gen;
END_RCPP
}
// vec_multiply_left_cpp
Eigen::VectorXd vec_multiply_left_cpp(SEXP matrix, Eigen::Map<Eigen::VectorXd> v);
RcppExport SEXP _BPCells_vec_multiply_left_cpp(SEXP matrixSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_multiply_left_cpp(matrix, v));
    return rcpp_result_gen;
END_RCPP
}
// dense_multiply_right_preserve_loader_cpp
Eigen::MatrixXd dense_multiply_right_preserve_loader_cpp(SEXP matrix, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _BPCells_dense_multiply_right_preserve_loader_cpp(SEXP matrixSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_multiply_right_preserve_loader_cpp(matrix, B));
    return rcpp_result_gen;
END_RCPP
}
// dense_multiply_left_preserve_loader_cpp
Eigen::MatrixXd dense_multiply_left_preserve_loader_cpp(SEXP matrix, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _BPCells_dense_multiply_left_preserve_loader_cpp(SEXP matrixSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_multiply_left_preserve_loader_cpp(matrix, B));
    return rcpp_result_gen;
END_RCPP
}
// vec_multiply_right_preserve_loader_cpp
Eigen::VectorXd vec_multiply_right_preserve_loader_cpp(SEXP matrix, Eigen::Map<Eigen::VectorXd> v);
RcppExport SEXP _BPCells_vec_multiply_right_preserve_loader_cpp(SEXP matrixSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_multiply_right_preserve_loader_cpp(matrix, v));
    return rcpp_result_gen;
END_RCPP
}
// vec_multiply_left_preserve_loader_cpp
Eigen::VectorXd vec_multiply_left_preserve_loader_cpp(SEXP matrix, Eigen::Map<Eigen::VectorXd> v);
RcppExport SEXP _BPCells_vec_multiply_left_preserve_loader_cpp(SEXP matrixSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_multiply_left_preserve_loader_cpp(matrix, v));
    return rcpp_result_gen;
END_RCPP
}
// row_sums_double_cpp
std::vector<double> row_sums_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_row_sums_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(row_sums_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// col_sums_double_cpp
std::vector<double> col_sums_double_cpp(SEXP matrix);
RcppExport SEXP _BPCells_col_sums_double_cpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(col_sums_double_cpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// matrix_stats_cpp
List matrix_stats_cpp(SEXP matrix, int row_stats, int col_stats);
RcppExport SEXP _BPCells_matrix_stats_cpp(SEXP matrixSEXP, SEXP row_statsSEXP, SEXP col_statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type row_stats(row_statsSEXP);
    Rcpp::traits::input_parameter< int >::type col_stats(col_statsSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_stats_cpp(matrix, row_stats, col_stats));
    return rcpp_result_gen;
END_RCPP
}
// wilcoxon_rank_sum_pval_uint32_t_cpp
Eigen::MatrixXd wilcoxon_rank_sum_pval_uint32_t_cpp(SEXP matrix, std::vector<uint32_t> groups);
RcppExport SEXP _BPCells_wilcoxon_rank_sum_pval_uint32_t_cpp(SEXP matrixSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(wilcoxon_rank_sum_pval_uint32_t_cpp(matrix, groups));
    return rcpp_result_gen;
END_RCPP
}
// wilcoxon_rank_sum_pval_float_cpp
Eigen::MatrixXd wilcoxon_rank_sum_pval_float_cpp(SEXP matrix, std::vector<uint32_t> groups);
RcppExport SEXP _BPCells_wilcoxon_rank_sum_pval_float_cpp(SEXP matrixSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(wilcoxon_rank_sum_pval_float_cpp(matrix, groups));
    return rcpp_result_gen;
END_RCPP
}
// wilcoxon_rank_sum_pval_double_cpp
Eigen::MatrixXd wilcoxon_rank_sum_pval_double_cpp(SEXP matrix, std::vector<uint32_t> groups);
RcppExport SEXP _BPCells_wilcoxon_rank_sum_pval_double_cpp(SEXP matrixSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(wilcoxon_rank_sum_pval_double_cpp(matrix, groups));
    return rcpp_result_gen;
END_RCPP
}
// matrix_identical_uint32_t_cpp
bool matrix_identical_uint32_t_cpp(SEXP mat1, SEXP mat2);
RcppExport SEXP _BPCells_matrix_identical_uint32_t_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_identical_uint32_t_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BPCells_convert_ulong_to_numeric", (DL_FUNC) &_BPCells_convert_ulong_to_numeric, 1},
    {"_BPCells_read_integer_vector", (DL_FUNC) &_BPCells_read_integer_vector, 1},
    {"_BPCells_open_file_reader", (DL_FUNC) &_BPCells_open_file_reader, 1},
    {"_BPCells_open_bp128_d1z", (DL_FUNC) &_BPCells_open_bp128_d1z, 5},
    {"_BPCells_open_bp128_d1", (DL_FUNC) &_BPCells_open_bp128_d1, 5},
    {"_BPCells_open_bp128_for", (DL_FUNC) &_BPCells_open_bp128_for, 4},
    {"_BPCells_simd_vec_version", (DL_FUNC) &_BPCells_simd_vec_version, 0},
    {"_BPCells_simd_sleef_version", (DL_FUNC) &_BPCells_simd_sleef_version, 0},
    {"_BPCells_iterate_10x_fragments_cpp", (DL_FUNC) &_BPCells_iterate_10x_fragments_cpp, 2},
    {"_BPCells_write_10x_fragments_cpp", (DL_FUNC) &_BPCells_write_10x_fragments_cpp, 3},
    {"_BPCells_iterate_packed_fragments_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_cpp, 1},
    {"_BPCells_calculate_end_max_cpp", (DL_FUNC) &_BPCells_calculate_end_max_cpp, 2},
    {"_BPCells_write_packed_fragments_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_cpp, 1},
    {"_BPCells_iterate_unpacked_fragments_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_cpp, 1},
    {"_BPCells_write_unpacked_fragments_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_cpp, 1},
    {"_BPCells_info_fragments_file_cpp", (DL_FUNC) &_BPCells_info_fragments_file_cpp, 2},
    {"_BPCells_iterate_unpacked_fragments_file_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_file_cpp, 4},
    {"_BPCells_write_unpacked_fragments_file_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_file_cpp, 4},
    {"_BPCells_iterate_packed_fragments_file_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_file_cpp, 4},
    {"_BPCells_write_packed_fragments_file_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_file_cpp, 4},
    {"_BPCells_info_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_info_fragments_hdf5_cpp, 3},
    {"_BPCells_iterate_unpacked_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_hdf5_cpp, 5},
    {"_BPCells_write_unpacked_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_hdf5_cpp, 6},
    {"_BPCells_iterate_packed_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_hdf5_cpp, 5},
    {"_BPCells_write_packed_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_hdf5_cpp, 6},
    {"_BPCells_fragments_identical_cpp", (DL_FUNC) &_BPCells_fragments_identical_cpp, 2},
    {"_BPCells_scan_fragments_cpp", (DL_FUNC) &_BPCells_scan_fragments_cpp, 1},
    {"_BPCells_iterate_peak_matrix_cpp", (DL_FUNC) &_BPCells_iterate_peak_matrix_cpp, 6},
    {"_BPCells_iterate_tile_matrix_cpp", (DL_FUNC) &_BPCells_iterate_tile_matrix_cpp, 6},
    {"_BPCells_get_tile_names_cpp", (DL_FUNC) &_BPCells_get_tile_names_cpp, 5},
    {"_BPCells_get_tile_ranges_cpp", (DL_FUNC) &_BPCells_get_tile_ranges_cpp, 6},
    {"_BPCells_nucleosome_counts_cpp", (DL_FUNC) &_BPCells_nucleosome_counts_cpp, 2},
    {"_BPCells_fragment_lengths_cpp", (DL_FUNC) &_BPCells_fragment_lengths_cpp, 1},
    {"_BPCells_footprint_matrix_cpp", (DL_FUNC) &_BPCells_footprint_matrix_cpp, 8},
    {"_BPCells_iterate_shift_cpp", (DL_FUNC) &_BPCells_iterate_shift_cpp, 3},
    {"_BPCells_iterate_length_select_cpp", (DL_FUNC) &_BPCells_iterate_length_select_cpp, 3},
    {"_BPCells_iterate_chr_index_select_cpp", (DL_FUNC) &_BPCells_iterate_chr_index_select_cpp, 2},
    {"_BPCells_iterate_chr_name_select_cpp", (DL_FUNC) &_BPCells_iterate_chr_name_select_cpp, 2},
    {"_BPCells_iterate_cell_index_select_cpp", (DL_FUNC) &_BPCells_iterate_cell_index_select_cpp, 2},
    {"_BPCells_iterate_cell_name_select_cpp", (DL_FUNC) &_BPCells_iterate_cell_name_select_cpp, 2},
    {"_BPCells_iterate_cell_merge_cpp", (DL_FUNC) &_BPCells_iterate_cell_merge_cpp, 3},
    {"_BPCells_iterate_chr_rename_cpp", (DL_FUNC) &_BPCells_iterate_chr_rename_cpp, 2},
    {"_BPCells_iterate_cell_rename_cpp", (DL_FUNC) &_BPCells_iterate_cell_rename_cpp, 2},
    {"_BPCells_iterate_cell_prefix_cpp", (DL_FUNC) &_BPCells_iterate_cell_prefix_cpp, 2},
    {"_BPCells_iterate_region_select_cpp", (DL_FUNC) &_BPCells_iterate_region_select_cpp, 6},
    {"_BPCells_iterate_merge_fragments_cpp", (DL_FUNC) &_BPCells_iterate_merge_fragments_cpp, 2},
    {"_BPCells_write_matrix_transpose_uint32_t_cpp", (DL_FUNC) &_BPCells_write_matrix_transpose_uint32_t_cpp, 6},
    {"_BPCells_write_matrix_transpose_float_cpp", (DL_FUNC) &_BPCells_write_matrix_transpose_float_cpp, 6},
    {"_BPCells_write_matrix_transpose_double_cpp", (DL_FUNC) &_BPCells_write_matrix_transpose_double_cpp, 6},
    {"_BPCells_iterate_packed_matrix_mem_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_mem_uint32_t_cpp, 4},
    {"_BPCells_iterate_unpacked_matrix_mem_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_mem_uint32_t_cpp, 4},
    {"_BPCells_iterate_packed_matrix_mem_float_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_mem_float_cpp, 4},
    {"_BPCells_iterate_unpacked_matrix_mem_float_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_mem_float_cpp, 4},
    {"_BPCells_iterate_packed_matrix_mem_double_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_mem_double_cpp, 4},
    {"_BPCells_iterate_unpacked_matrix_mem_double_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_mem_double_cpp, 4},
    {"_BPCells_write_packed_matrix_mem_uint32_t_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_mem_uint32_t_cpp, 2},
    {"_BPCells_write_unpacked_matrix_mem_uint32_t_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_mem_uint32_t_cpp, 2},
    {"_BPCells_write_packed_matrix_mem_float_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_mem_float_cpp, 2},
    {"_BPCells_write_unpacked_matrix_mem_float_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_mem_float_cpp, 2},
    {"_BPCells_write_packed_matrix_mem_double_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_mem_double_cpp, 2},
    {"_BPCells_write_unpacked_matrix_mem_double_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_mem_double_cpp, 2},
    {"_BPCells_dims_matrix_file_cpp", (DL_FUNC) &_BPCells_dims_matrix_file_cpp, 2},
    {"_BPCells_iterate_unpacked_matrix_file_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_file_uint32_t_cpp, 5},
    {"_BPCells_iterate_packed_matrix_file_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_file_uint32_t_cpp, 5},
    {"_BPCells_iterate_unpacked_matrix_file_float_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_file_float_cpp, 5},
    {"_BPCells_iterate_packed_matrix_file_float_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_file_float_cpp, 5},
    {"_BPCells_iterate_unpacked_matrix_file_double_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_file_double_cpp, 5},
    {"_BPCells_iterate_packed_matrix_file_double_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_file_double_cpp, 5},
    {"_BPCells_write_unpacked_matrix_file_uint32_t_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_file_uint32_t_cpp, 5},
    {"_BPCells_write_packed_matrix_file_uint32_t_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_file_uint32_t_cpp, 5},
    {"_BPCells_write_unpacked_matrix_file_float_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_file_float_cpp, 5},
    {"_BPCells_write_packed_matrix_file_float_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_file_float_cpp, 5},
    {"_BPCells_write_unpacked_matrix_file_double_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_file_double_cpp, 5},
    {"_BPCells_write_packed_matrix_file_double_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_file_double_cpp, 5},
    {"_BPCells_dims_matrix_hdf5_cpp", (DL_FUNC) &_BPCells_dims_matrix_hdf5_cpp, 3},
    {"_BPCells_iterate_unpacked_matrix_hdf5_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_hdf5_uint32_t_cpp, 6},
    {"_BPCells_iterate_packed_matrix_hdf5_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_hdf5_uint32_t_cpp, 6},
    {"_BPCells_iterate_unpacked_matrix_hdf5_float_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_hdf5_float_cpp, 6},
    {"_BPCells_iterate_packed_matrix_hdf5_float_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_hdf5_float_cpp, 6},
    {"_BPCells_iterate_unpacked_matrix_hdf5_double_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_matrix_hdf5_double_cpp, 6},
    {"_BPCells_iterate_packed_matrix_hdf5_double_cpp", (DL_FUNC) &_BPCells_iterate_packed_matrix_hdf5_double_cpp, 6},
    {"_BPCells_write_unpacked_matrix_hdf5_uint32_t_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_hdf5_uint32_t_cpp, 7},
    {"_BPCells_write_packed_matrix_hdf5_uint32_t_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_hdf5_uint32_t_cpp, 7},
    {"_BPCells_write_unpacked_matrix_hdf5_float_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_hdf5_float_cpp, 7},
    {"_BPCells_write_packed_matrix_hdf5_float_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_hdf5_float_cpp, 7},
    {"_BPCells_write_unpacked_matrix_hdf5_double_cpp", (DL_FUNC) &_BPCells_write_unpacked_matrix_hdf5_double_cpp, 7},
    {"_BPCells_write_packed_matrix_hdf5_double_cpp", (DL_FUNC) &_BPCells_write_packed_matrix_hdf5_double_cpp, 7},
    {"_BPCells_dims_matrix_10x_hdf5_cpp", (DL_FUNC) &_BPCells_dims_matrix_10x_hdf5_cpp, 2},
    {"_BPCells_iterate_matrix_10x_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_matrix_10x_hdf5_cpp, 4},
    {"_BPCells_write_matrix_10x_hdf5_cpp", (DL_FUNC) &_BPCells_write_matrix_10x_hdf5_cpp, 9},
    {"_BPCells_dims_matrix_anndata_hdf5_cpp", (DL_FUNC) &_BPCells_dims_matrix_anndata_hdf5_cpp, 3},
    {"_BPCells_iterate_matrix_anndata_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_matrix_anndata_hdf5_cpp, 5},
    {"_BPCells_read_hdf5_string_cpp", (DL_FUNC) &_BPCells_read_hdf5_string_cpp, 3},
    {"_BPCells_hdf5_group_exists_cpp", (DL_FUNC) &_BPCells_hdf5_group_exists_cpp, 2},
    {"_BPCells_import_matrix_market_cpp", (DL_FUNC) &_BPCells_import_matrix_market_cpp, 8},
    {"_BPCells_iterate_matrix_log1p_cpp", (DL_FUNC) &_BPCells_iterate_matrix_log1p_cpp, 1},
    {"_BPCells_iterate_matrix_log1psimd_cpp", (DL_FUNC) &_BPCells_iterate_matrix_log1psimd_cpp, 1},
    {"_BPCells_iterate_matrix_expm1_cpp", (DL_FUNC) &_BPCells_iterate_matrix_expm1_cpp, 1},
    {"_BPCells_iterate_matrix_expm1simd_cpp", (DL_FUNC) &_BPCells_iterate_matrix_expm1simd_cpp, 1},
    {"_BPCells_iterate_matrix_pow_cpp", (DL_FUNC) &_BPCells_iterate_matrix_pow_cpp, 2},
    {"_BPCells_iterate_matrix_powsimd_cpp", (DL_FUNC) &_BPCells_iterate_matrix_powsimd_cpp, 2},
    {"_BPCells_iterate_matrix_square_cpp", (DL_FUNC) &_BPCells_iterate_matrix_square_cpp, 1},
    {"_BPCells_iterate_matrix_min_cpp", (DL_FUNC) &_BPCells_iterate_matrix_min_cpp, 2},
    {"_BPCells_iterate_matrix_min_by_row_cpp", (DL_FUNC) &_BPCells_iterate_matrix_min_by_row_cpp, 2},
    {"_BPCells_iterate_matrix_min_by_col_cpp", (DL_FUNC) &_BPCells_iterate_matrix_min_by_col_cpp, 2},
    {"_BPCells_iterate_matrix_round_cpp", (DL_FUNC) &_BPCells_iterate_matrix_round_cpp, 1},
    {"_BPCells_iterate_matrix_sctransform_pearson_cpp", (DL_FUNC) &_BPCells_iterate_matrix_sctransform_pearson_cpp, 4},
    {"_BPCells_iterate_matrix_sctransform_pearson_transpose_cpp", (DL_FUNC) &_BPCells_iterate_matrix_sctransform_pearson_transpose_cpp, 4},
    {"_BPCells_iterate_matrix_sctransform_pearson_simd_cpp", (DL_FUNC) &_BPCells_iterate_matrix_sctransform_pearson_simd_cpp, 4},
    {"_BPCells_iterate_matrix_sctransform_pearson_transpose_simd_cpp", (DL_FUNC) &_BPCells_iterate_matrix_sctransform_pearson_transpose_simd_cpp, 4},
    {"_BPCells_iterate_matrix_scale_cpp", (DL_FUNC) &_BPCells_iterate_matrix_scale_cpp, 3},
    {"_BPCells_iterate_matrix_row_shift_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_shift_cpp, 2},
    {"_BPCells_iterate_matrix_col_shift_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_shift_cpp, 2},
    {"_BPCells_iterate_csparse_matrix_cpp", (DL_FUNC) &_BPCells_iterate_csparse_matrix_cpp, 3},
    {"_BPCells_convert_matrix_uint32_t_double_cpp", (DL_FUNC) &_BPCells_convert_matrix_uint32_t_double_cpp, 1},
    {"_BPCells_convert_matrix_uint32_t_float_cpp", (DL_FUNC) &_BPCells_convert_matrix_uint32_t_float_cpp, 1},
    {"_BPCells_convert_matrix_double_uint32_t_cpp", (DL_FUNC) &_BPCells_convert_matrix_double_uint32_t_cpp, 1},
    {"_BPCells_convert_matrix_double_float_cpp", (DL_FUNC) &_BPCells_convert_matrix_double_float_cpp, 1},
    {"_BPCells_convert_matrix_float_uint32_t_cpp", (DL_FUNC) &_BPCells_convert_matrix_float_uint32_t_cpp, 1},
    {"_BPCells_convert_matrix_float_double_cpp", (DL_FUNC) &_BPCells_convert_matrix_float_double_cpp, 1},
    {"_BPCells_build_csparse_matrix_double_cpp", (DL_FUNC) &_BPCells_build_csparse_matrix_double_cpp, 1},
    {"_BPCells_iterate_matrix_col_select_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_select_uint32_t_cpp, 2},
    {"_BPCells_iterate_matrix_col_select_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_select_float_cpp, 2},
    {"_BPCells_iterate_matrix_col_select_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_select_double_cpp, 2},
    {"_BPCells_iterate_matrix_row_select_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_select_uint32_t_cpp, 2},
    {"_BPCells_iterate_matrix_row_select_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_select_float_cpp, 2},
    {"_BPCells_iterate_matrix_row_select_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_select_double_cpp, 2},
    {"_BPCells_iterate_matrix_row_bind_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_bind_uint32_t_cpp, 1},
    {"_BPCells_iterate_matrix_row_bind_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_bind_float_cpp, 1},
    {"_BPCells_iterate_matrix_row_bind_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_row_bind_double_cpp, 1},
    {"_BPCells_iterate_matrix_col_bind_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_bind_uint32_t_cpp, 1},
    {"_BPCells_iterate_matrix_col_bind_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_bind_float_cpp, 1},
    {"_BPCells_iterate_matrix_col_bind_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_col_bind_double_cpp, 1},
    {"_BPCells_iterate_matrix_multiply_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_multiply_uint32_t_cpp, 2},
    {"_BPCells_iterate_matrix_multiply_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_multiply_float_cpp, 2},
    {"_BPCells_iterate_matrix_multiply_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_multiply_double_cpp, 2},
    {"_BPCells_iterate_matrix_mask_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_mask_uint32_t_cpp, 3},
    {"_BPCells_iterate_matrix_mask_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_mask_float_cpp, 3},
    {"_BPCells_iterate_matrix_mask_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_mask_double_cpp, 3},
    {"_BPCells_iterate_matrix_rank_uint32_t_cpp", (DL_FUNC) &_BPCells_iterate_matrix_rank_uint32_t_cpp, 1},
    {"_BPCells_iterate_matrix_rank_float_cpp", (DL_FUNC) &_BPCells_iterate_matrix_rank_float_cpp, 1},
    {"_BPCells_iterate_matrix_rank_double_cpp", (DL_FUNC) &_BPCells_iterate_matrix_rank_double_cpp, 1},
    {"_BPCells_dense_multiply_right_cpp", (DL_FUNC) &_BPCells_dense_multiply_right_cpp, 2},
    {"_BPCells_dense_multiply_left_cpp", (DL_FUNC) &_BPCells_dense_multiply_left_cpp, 2},
    {"_BPCells_vec_multiply_right_cpp", (DL_FUNC) &_BPCells_vec_multiply_right_cpp, 2},
    {"_BPCells_vec_multiply_left_cpp", (DL_FUNC) &_BPCells_vec_multiply_left_cpp, 2},
    {"_BPCells_dense_multiply_right_preserve_loader_cpp", (DL_FUNC) &_BPCells_dense_multiply_right_preserve_loader_cpp, 2},
    {"_BPCells_dense_multiply_left_preserve_loader_cpp", (DL_FUNC) &_BPCells_dense_multiply_left_preserve_loader_cpp, 2},
    {"_BPCells_vec_multiply_right_preserve_loader_cpp", (DL_FUNC) &_BPCells_vec_multiply_right_preserve_loader_cpp, 2},
    {"_BPCells_vec_multiply_left_preserve_loader_cpp", (DL_FUNC) &_BPCells_vec_multiply_left_preserve_loader_cpp, 2},
    {"_BPCells_row_sums_double_cpp", (DL_FUNC) &_BPCells_row_sums_double_cpp, 1},
    {"_BPCells_col_sums_double_cpp", (DL_FUNC) &_BPCells_col_sums_double_cpp, 1},
    {"_BPCells_matrix_stats_cpp", (DL_FUNC) &_BPCells_matrix_stats_cpp, 3},
    {"_BPCells_wilcoxon_rank_sum_pval_uint32_t_cpp", (DL_FUNC) &_BPCells_wilcoxon_rank_sum_pval_uint32_t_cpp, 2},
    {"_BPCells_wilcoxon_rank_sum_pval_float_cpp", (DL_FUNC) &_BPCells_wilcoxon_rank_sum_pval_float_cpp, 2},
    {"_BPCells_wilcoxon_rank_sum_pval_double_cpp", (DL_FUNC) &_BPCells_wilcoxon_rank_sum_pval_double_cpp, 2},
    {"_BPCells_matrix_identical_uint32_t_cpp", (DL_FUNC) &_BPCells_matrix_identical_uint32_t_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BPCells(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
