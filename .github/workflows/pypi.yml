name: Publish to PyPI

on: 
  workflow_dispatch:
    inputs: 
      tag:
        description: Git tag to publish (default to current commit)
        default: ''

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Get work dir
        id: work-dir
        run: echo "dir=$(pwd)" >> "$GITHUB_OUTPUT"
            
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install platformdirs

      # Step credit: https://github.com/Cryptex-github/ril-py/blob/main/.github/workflows/py-binding.yml
      - name: Display cibuildwheel cache dir
        id: cibuildwheel-cache
        run: |
          from platformdirs import user_cache_path
          import os

          with open(os.getenv('GITHUB_OUTPUT'), 'w') as f:
            f.write(f"dir={str(user_cache_path(appname='cibuildwheel', appauthor='pypa'))}")
        shell: python

      - name: Cache cibuildwheel 
        id: cache-cibuildwheel
        uses: actions/cache@v4
        with:
          path: ${{ steps.cibuildwheel-cache.outputs.dir }}
          key: cibuildwheel-cache-${{ matrix.os }}
        
      - name: Cache dependency libs
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: ${{ steps.work-dir.outputs.dir }}/lib-cache
          key: lib-cache-${{ matrix.os }}
      
      # From: https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables for vcpkg
        uses: actions/github-script@v7
        if: ${{ matrix.os }} == 'windows-latest'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.1
        with:
          package-dir: python
        env:
          CIBW_ENVIRONMENT_LINUX: >-
            CXX="ccache g++"
            LIB_CACHE="${{ steps.work-dir.outputs.dir }}/lib-cache"
          CIBW_BEFORE_ALL_LINUX: >
            LIB_CACHE=/host/$LIB_CACHE bash {package}/scripts/install_ccache.sh &&
            LIB_CACHE=/host/$LIB_CACHE bash {package}/scripts/install_eigen.sh &&
            LIB_CACHE=/host/$LIB_CACHE bash {package}/scripts/install_hdf5.sh &&
            LIB_CACHE=/host/$LIB_CACHE bash {package}/scripts/install_highway.sh

          CIBW_ENVIRONMENT_MACOS: >-
            CXX="ccache g++"
            LIB_CACHE="${{ steps.work-dir.outputs.dir }}/lib-cache"
            CPATH="$(pwd)/lib-root/include"
            LIBRARY_PATH="$(pwd)/lib-root/lib:$(pwd)/lib-root/lib64"
            MACOSX_DEPLOYMENT_TARGET="10.15"
          CIBW_BEFORE_ALL_MACOS: >
            brew install ccache &&
            mkdir -p $LIB_CACHE &&
            bash {package}/scripts/install_eigen.sh $(pwd)/lib-root &&
            bash {package}/scripts/install_hdf5.sh $(pwd)/lib-root &&
            bash {package}/scripts/install_highway.sh $(pwd)/lib-root
          
          # VCPKG_BINARY_SOURCES from: https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
          CIBW_ENVIRONMENT_WINDOWS: >- 
            VCPKG_BINARY_SOURCES="clear;x-gha,readwrite" 
            LIBRARY_PATH="C:\\vcpkg\\installed\\x64-windows\\lib"
            CPATH="C:\\vcpkg\\installed\\x64-windows\\include"
          CIBW_BEFORE_ALL_WINDOWS: >-
            vcpkg install hdf5 eigen3 highway[contrib] zlib && 
            pip install delvewheel
          # See https://github.com/adang1345/delvewheel/issues/54 for explanation of `--add-path C:/Windows/System32`
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
            delvewheel repair --add-path C:/vcpkg/installed/x64-windows/bin --add-path C:/Windows/System32 --wheel-dir {dest_dir} {wheel} 

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-tags: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a source tarball
      run: python3 -m build --sdist python
      
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: python/dist/

  publish-to-testpypi:
    name: Publish Python package to TestPyPI
    needs:
    - build-wheels
    - build-sdist
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://test.pypi.org/p/bpcells

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: dist/
    - name: Publish distribution ðŸ“¦ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Our .whl files are nested two-layers deep, so this will do
        # twine upload dist/*/*.whl
        packages-dir: dist/*
        repository-url: https://test.pypi.org/legacy/
